<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>排序算法的可视化</title>
    <link href="/2024/06/12/(%E9%A1%B9%E7%9B%AE)%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <url>/2024/06/12/(%E9%A1%B9%E7%9B%AE)%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="1、数据结构与算法设计课程实践"><a href="#1、数据结构与算法设计课程实践" class="headerlink" title="1、数据结构与算法设计课程实践"></a>1、数据结构与算法设计课程实践</h2><p>排序数据随机产生，针对随机案例，对冒泡排序、堆排序、归并算法，提供排序执行过程的动态图形演示。</p><p>扩展：直接插入排序、选择排序、快速排序算法</p><h2 id="2、详细分析"><a href="#2、详细分析" class="headerlink" title="2、详细分析"></a>2、详细分析</h2><h3 id="2-1-数据结构与算法说明"><a href="#2-1-数据结构与算法说明" class="headerlink" title="2.1 数据结构与算法说明"></a>2.1 数据结构与算法说明</h3><h4 id="2-1-1-冒泡排序（Bubble-Sort）"><a href="#2-1-1-冒泡排序（Bubble-Sort）" class="headerlink" title="2.1.1 冒泡排序（Bubble Sort）"></a>2.1.1 冒泡排序（Bubble Sort）</h4><p>冒泡排序是一种简单直观的排序算法。它重复地遍历要排序的列表，比较相邻的两个元素，并且交换它们的位置，直到整个列表排序完成。具体步骤如下：</p><ol><li>从列表的第一个元素开始，依次比较相邻的两个元素。</li><li>如果第一个元素比第二个元素大（或者小，取决于升序还是降序），则交换它们的位置。</li><li>继续向后遍历列表，重复上述比较和交换步骤，直到列表末尾。</li><li>重复以上步骤，每次遍历都会将当前未排序部分的最大（或最小）元素“冒泡”到列表的末尾。</li><li>重复以上步骤，直到整个列表排序完成。</li></ol><p>冒泡排序的时间复杂度为 O(n^2)，空间复杂度为 O(1)。尽管冒泡排序实现简单，但在实际应用中往往效率较低，特别是对于大型数据集。</p><h4 id="2-1-3-堆排序（Heap-Sort）"><a href="#2-1-3-堆排序（Heap-Sort）" class="headerlink" title="2.1.3 堆排序（Heap Sort）"></a>2.1.3 堆排序（Heap Sort）</h4><p>堆排序是一种利用堆数据结构的排序算法。它利用了堆的特性，将待排序的序列构造成一个堆（通常是大顶堆），然后依次将堆顶元素与末尾元素交换，重新调整堆，直到整个序列有序。具体步骤如下：</p><ol><li>构建初始堆：将待排序的序列构造成一个大顶堆。</li><li>交换堆顶元素和末尾元素：将堆顶元素（当前最大元素）与末尾元素交换，并将堆的大小减 1。</li><li>重新调整堆：将剩余元素重新调整成大顶堆。</li><li>重复步骤 2 和步骤 3，直到堆的大小为 1。</li></ol><p>堆排序的时间复杂度为 O(n log n)，空间复杂度为 O(1)。它具有原地排序的特点，不需要额外的空间，因此在空间效率上比较高。</p><h4 id="2-1-3-归并排序（Merge-Sort）"><a href="#2-1-3-归并排序（Merge-Sort）" class="headerlink" title="2.1.3 归并排序（Merge Sort）"></a>2.1.3 归并排序（Merge Sort）</h4><p>归并排序是一种分治算法，它将待排序数组分成两个子数组，然后递归地对子数组进行排序，最后将排好序的子数组合并成一个整体有序的数组。具体步骤如下：</p><ol><li>分解：将待排序的数组递归地分解成两个子数组，直到每个子数组只有一个元素。</li><li>合并：将两个有序的子数组合并成一个有序数组，同时进行排序。</li><li>重复以上步骤，直到所有子数组合并完成，得到最终的有序数组。</li></ol><p>归并排序的时间复杂度为 O(n log n)，空间复杂度为 O(n)，因为需要额外的空间来存储临时数组。尽管归并排序在空间上略高，但由于其稳定性和适用性，仍然被广泛应用。</p><h4 id="2-1-4-直接插入排序（Insertion-Sort）"><a href="#2-1-4-直接插入排序（Insertion-Sort）" class="headerlink" title="2.1.4 直接插入排序（Insertion Sort）"></a>2.1.4 直接插入排序（Insertion Sort）</h4><p>直接插入排序是一种简单直观的排序算法，它通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。具体步骤如下：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序。</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描。</li><li>如果已排序的元素大于新元素，将该已排序元素移到下一位置。</li><li>重复步骤3，直到找到已排序的元素小于或等于新元素的位置。</li><li>将新元素插入到该位置中。</li><li>重复步骤2-5。</li></ol><p><strong>时间复杂度</strong>：最坏情况 O(n^2)，最好情况 O(n) <strong>空间复杂度</strong>：O(1) <strong>特点</strong>：适合于少量数据的排序，稳定。</p><h4 id="2-1-5-选择排序（Selection-Sort）"><a href="#2-1-5-选择排序（Selection-Sort）" class="headerlink" title="2.1.5 选择排序（Selection Sort）"></a>2.1.5 选择排序（Selection Sort）</h4><p>选择排序是一种简单直观的排序算法，它的工作原理是每次从待排序的数据中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。具体步骤如下：</p><ol><li>初始状态：无序区为 R[1..n]，有序区为空。</li><li>第i趟排序 (i&#x3D;1,2,3…n-1) 开始时，当前有序区和无序区分别为 R[1..i-1] 和 R(i..n)。该趟排序从当前无序区中选出关键字最小的记录 R[k]，将它与无序区的第一个记录 R交换，使 R[1..i] 和 R[i+1..n] 分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区。</li><li>n-1趟结束，数组有序化。</li></ol><p><strong>时间复杂度</strong>：O(n^2) <strong>空间复杂度</strong>：O(1) <strong>特点</strong>：简单直观，适合数据量小的情况，不稳定。</p><h4 id="2-1-6-快速排序（Quick-Sort）"><a href="#2-1-6-快速排序（Quick-Sort）" class="headerlink" title="2.1.6 快速排序（Quick Sort）"></a>2.1.6 快速排序（Quick Sort）</h4><p>快速排序是一种分治算法，通过一次排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序。具体步骤如下：</p><ol><li>从数列中挑出一个元素，称为“基准”（pivot）。</li><li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><p><strong>时间复杂度</strong>：最坏情况 O(n^2)，平均情况 O(n log n) <strong>空间复杂度</strong>：O(log n)（递归调用造成的栈空间） <strong>特点</strong>：速度快，效率高，适合大规模数据的排序，不稳定。</p><h3 id="2-2-设计思路"><a href="#2-2-设计思路" class="headerlink" title="2.2 设计思路"></a>2.2 设计思路</h3><blockquote><p>阐述算法的设计思想，辅以流程图加以说明。此部分是利用上节中涉及的知识点和算法进行解题，即阐述的重点是强调如何对知识点和算法的组合运用。可以利用流程图、框架图等各种图形化工具进行详细的阐述说明，目的就是把设计思路讲清楚说明白。</p></blockquote><ol><li><p><strong>目标设定</strong>：</p><p>创建一个可视化工具，展示不同排序算法的执行过程,让用户能够直观地理解排序算法的工作原理。</p></li><li><p><strong>技术选型</strong>：</p><ul><li>选择Python语言，因其简洁易懂，拥有丰富的库支持。</li><li>选择Matplotlib库，不仅支持数据可视化，还能生成动画，与FFMpeg结合后能直接输出视频格式。</li></ul></li><li><p><strong>排序算法实现</strong>：</p><ul><li>采用Python实现多种排序算法，如冒泡排序、归并排序、堆排序等。</li><li>每种排序算法都设计为能够记录其执行过程中的“帧”。</li></ul></li><li><p><strong>动画帧处理</strong>：</p><ul><li>在排序算法的关键步骤截取数据状态，作为动画的一帧。</li><li>使用深拷贝来保存每一帧的状态，确保动画的流畅性和数据的一致性。</li></ul></li><li><p><strong>颜色编码</strong>：</p><ul><li>为了突出显示排序过程中的重要操作，采用颜色编码来增强视觉效果。例如，在交换元素时，将涉及的元素标记为特定颜色。</li></ul></li><li><p><strong>动画展示</strong>：</p><ul><li>利用Matplotlib的动画功能，将排序过程的帧连续播放，形成动画。</li><li>提供播放、保存为HTML或MP4文件的功能，以适应不同的展示需求。</li></ul></li><li><p><strong>用户交互</strong>：</p><ul><li>允许用户通过命令行参数选择排序算法和数据类型。</li><li>支持用户自定义动画的帧间隔和每秒帧数（fps）。</li><li>用户可以通过命令行界面选择播放动画、保存为视频或HTML文件</li></ul></li><li><p><strong>代码实现</strong>：</p><ul><li>对于每种排序算法，实现一个函数，该函数不仅执行排序，还生成动画帧。</li><li>使用注释明确区分动画帧操作部分，保持代码的清晰和可维护性。</li></ul></li><li><p><strong>扩展性</strong>：</p><ul><li>设计时考虑到扩展性，方便未来添加更多的排序算法和展示特性。</li></ul></li></ol><p><strong>运行流程图：</strong></p><p><img src="http://cdn.ohheng.cn/202405061031600.png" alt="排序可视化"></p><ol><li><strong>开始</strong>：用户启动排序算法可视化过程。</li><li><strong>运行 <code>output.py</code> 脚本</strong>：用户在命令行中运行 <code>output.py</code> 脚本，开始执行排序算法的可视化。</li><li><strong>命令行参数解析</strong>：脚本首先解析用户提供的命令行参数，这些参数决定了可视化的类型（播放、保存为 HTML 或 MP4）和排序算法的具体选项。</li><li><strong>选择数据类型</strong>：根据用户的选择，脚本确定要生成的数据集类型，如随机、几乎排序好、少数唯一值或逆序。</li><li><strong>生成数据集</strong>：脚本使用选定的数据类型生成一个待排序的数据集。</li><li><strong>执行排序算法</strong>：脚本对生成的数据集执行用户选择的排序算法。</li><li><strong>生成动画帧</strong>：在排序过程中，脚本记录每一步的状态，生成动画帧。</li><li><strong>保存动画帧为图片序列</strong>：脚本将生成的动画帧保存为一系列图片文件。</li><li><strong>播放动画</strong>（如果用户选择 <code>play</code>）：<ul><li>脚本使用 Matplotlib 在窗口中播放排序过程的动画。</li></ul></li><li><strong>保存为 HTML</strong>（如果用户选择 <code>save-html</code>）：<ul><li>脚本创建一个 HTML 文件。</li><li>将图片序列嵌入到 HTML 文件中。</li><li>保存 HTML 页面，用户可以在浏览器中查看动画。</li></ul></li><li><strong>保存为 MP4</strong>（如果用户选择 <code>save-mp4</code>）：<ul><li>脚本指定输出路径和文件名。</li><li>调用 FFmpeg 命令行工具，将图片序列转换为 MP4 视频文件。</li><li>生成 MP4 视频文件。</li></ul></li><li><strong>结束</strong>：完成动画的播放或保存后，程序结束。</li></ol><h3 id="2-3-类-接口-函数设计"><a href="#2-3-类-接口-函数设计" class="headerlink" title="2.3 类&#x2F;接口&#x2F;函数设计"></a>2.3 类&#x2F;接口&#x2F;函数设计</h3><blockquote><p>列出需要实现的各类、接口、函数等，仅写出数据成员、构造函数、析构函数和其它接口函数等抽象定义，无需具体实现代码，并说明其实现的具体功能。学生应该认真思考题目问题，对问题进行分解，将大问题分解为若干子问题。使用结构化程序设计方法，为每个子过程设计函数。</p></blockquote><h4 id="2-3-1-output-py"><a href="#2-3-1-output-py" class="headerlink" title="2.3.1 output.py"></a>2.3.1 <code>output.py</code></h4><p>这个脚本是一个完整的应用程序，它展示了如何使用Python和matplotlib来创建教育性的排序算法可视化工具。用户可以通过命令行与程序交互，选择不同的排序算法和数据类型来观察排序过程。程序支持将排序过程保存为视频文件或HTML文件，方便分享和查看。</p><p><strong>全局变量：</strong></p><ul><li><code>stype_dic</code>：一个字典，存储排序算法名称和它们对应的索引。</li><li><code>titles</code>：一个列表，存储排序算法的标题和时间复杂度。</li><li><code>funs</code>：一个列表，存储排序算法的函数，可以通过索引快速访问。</li></ul><p><strong>函数定义：</strong></p><ul><li><code>create_original_data(dtype)</code>：根据提供的类型（”random”, “reversed”, “few-unique”, “almost-sorted”）生成原始数据集。</li><li><code>draw_chart(stype, original_data, frame_interval)</code>：绘制指定排序算法的动态图表。</li><li><code>draw_all_charts(original_data, frame_interval)</code>：绘制所有排序算法的动态图表。</li></ul><p><strong>主程序：</strong></p><ol><li>脚本首先尝试从用户那里获取要排序的数据项数量，如果失败则默认为32。</li><li>根据命令行参数，脚本可以执行三种操作：播放动画（<code>play</code>）、保存为HTML（<code>save-html</code>）或保存为MP4文件（<code>save-mp4</code>）。</li><li>根据用户输入的排序算法类型和数据类型，脚本调用相应的函数生成动画并展示或保存。</li></ol><h4 id="2-3-2-data-py"><a href="#2-3-2-data-py" class="headerlink" title="2.3.2 data.py"></a>2.3.2 <code>data.py</code></h4><p>用于在排序算法可视化中表示和区分数据元素。通过动态设置颜色，它可以增加可视化的可读性和吸引力。</p><p><strong>全局变量：</strong></p><p>data_count（int）:表示数据集中元素的总数,固定为32。</p><p><strong>构造函数：</strong></p><p><code> __init__(self, value):</code>初始化数据元素的值，并调用 <code>set_color</code> 方法来设置颜色。</p><p><strong>类方法：</strong></p><p><code>set_color(self, rgba=None)</code>: 设置数据元素的颜色。如果未提供 <code>rgba</code>，则根据元素的值自动计算颜色。</p><h4 id="2-3-3-排序算法"><a href="#2-3-3-排序算法" class="headerlink" title="2.3.3 排序算法"></a>2.3.3 排序算法</h4><ul><li><p><strong>冒泡排序<code>bubblesort.py</code></strong></p><ul><li>执行冒泡排序，并通过深拷贝（<code>copy.deepcopy</code>）在每个关键步骤保存数据状态，形成动画帧列表（<code>frames</code>）。在每次元素交换时，将当前状态添加到帧列表，并标记交换的元素为红色，以突出显示。</li></ul></li><li><p><strong>堆排序<code>heapsort.py</code></strong></p><p><strong>函数定义</strong></p><ol><li><strong>heap_sort(data_set)</strong>: 执行堆排序算法，并记录动画帧,返回一个包含排序过程每一步骤的动画帧列表</li><li><strong>heap_adjust(ds, head, tail, frames)</strong>: 对堆进行调整，确保堆的性质得到满足</li></ol></li><li><p><strong>归并排序<code>mergesort.py</code></strong></p><p><strong>函数定义</strong></p><ol><li><strong>merge_sort(data_set)</strong>: 执行归并排序算法，并记录动画帧。返回一个包含排序过程每一步骤的动画帧</li><li><strong>split_merge(ds, head, tail, frames)</strong>: 递归地分割数据集，并合并已排序的子序列。</li></ol></li><li><p><strong>直接插入排序<code>insertionsort.py</code></strong></p><ul><li>执行插入排序算法，记录动画帧。返回一个包含排序过程每一步骤的动画帧列表。</li></ul></li><li><p><strong>选择排序<code>selectionsort.py</code></strong></p><ul><li>执行选择排序算法，记录动画帧。返回一个包含排序过程每一步骤的动画帧列表。</li></ul></li><li><p><strong>快速排序<code>quicksort.py</code></strong></p><p><strong>函数定义</strong></p><ol><li><strong>quick_sort(data_set)</strong>: 作为快速排序的入口函数，初始化帧列表并调用递归的快速排序函数 <code>qsort</code>。返回一个包含排序过程每一步骤的动画帧列表。</li><li><strong>qsort(ds, head, tail, frames)</strong>: 递归函数，执行快速排序的分区操作，并递归地对子部分进行排序。</li></ol></li></ul><h3 id="2-4-类-接口-函数关系"><a href="#2-4-类-接口-函数关系" class="headerlink" title="2.4 类&#x2F;接口&#x2F;函数关系"></a>2.4 类&#x2F;接口&#x2F;函数关系</h3><blockquote><p>可利用图形化工具说明各类、函数之间的调用关系。由于目前阶段尚未学习软件工程等相关知识，在这里学生可以自由发挥，说清楚明白即可。鼓励学生自学结构化设计工具进行阐述说明。</p></blockquote><pre><code class=" mermaid">classDiagram    class Data &#123;        +int value        +tuple color        +int data_count        __init__(value) : Data        set_color(rgba=None) : None    &#125;    class SortingAlgorithm &#123;        +vector&lt;Data&gt; dataSet        __init__(dataSet) : SortingAlgorithm        +sort() : None        +getAlgorithmName() : str        +getSortedData() : vector&lt;Data&gt;    &#125;    class BubbleSort &#123;        +frames : vector&lt;Data&gt;        +bubble_sort(data_set) : vector&lt;Data&gt;    &#125;    class MergeSort &#123;        +frames : vector&lt;Data&gt;        +merge_sort(data_set) : vector&lt;Data&gt;        +split_merge(ds, head, tail, frames) : None    &#125;    class InsertionSort &#123;        +frames : vector&lt;Data&gt;        +insertion_sort(data_set) : vector&lt;Data&gt;    &#125;    class QuickSort &#123;        +frames : vector&lt;Data&gt;        +quick_sort(data_set) : vector&lt;Data&gt;        +qsort(ds, head, tail, frames) : None    &#125;    class SelectionSort &#123;        +frames : vector&lt;Data&gt;        +selection_sort(data_set) : vector&lt;Data&gt;    &#125;    class HeapSort &#123;        +frames : vector&lt;Data&gt;        +heap_sort(data_set) : vector&lt;Data&gt;        +heap_adjust(ds, head, tail, frames) : None        +color(ds, n) : vector&lt;Data&gt;    &#125;        SortingAlgorithm &lt;|-- BubbleSort    SortingAlgorithm &lt;|-- MergeSort    SortingAlgorithm &lt;|-- InsertionSort    SortingAlgorithm &lt;|-- QuickSort    SortingAlgorithm &lt;|-- SelectionSort    SortingAlgorithm &lt;|-- HeapSort</code></pre><h2 id="3、程序实现"><a href="#3、程序实现" class="headerlink" title="3、程序实现"></a>3、程序实现</h2><h3 id="3-1-核心代码说明"><a href="#3-1-核心代码说明" class="headerlink" title="3.1 核心代码说明"></a>3.1 核心代码说明</h3><blockquote><p>列出核心功能的相关代码，并加以说明。这里的核心代码可以是关键算法的代码，可以是通过自学实现的新技术代码，也可以是重要功能的相关代码等。注意，详细说明不仅指的是详细的注释，同时也要对相应代码涉及的原理和作用进行适当说明。不要粘贴全部源代码，请用截图的方式截取关键核心代码！文件排版要做的整洁干净舒适。</p></blockquote><h4 id="3-1-1-output-py"><a href="#3-1-1-output-py" class="headerlink" title="3.1.1 output.py"></a>3.1.1 <code>output.py</code></h4><p>在创建原始数据集的函数 <code>create_original_data</code> 中，核心功能是根据提供的类型 <code>dtype</code> 生成一个特定顺序的整数列表，这个列表将用于后续的排序算法可视化。</p><p>以下是核心代码的说明：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haskell">复制def create_original_data(dtype):<br>    <span class="hljs-class"><span class="hljs-keyword">data</span> = []</span><br>    <span class="hljs-keyword">if</span> dtype == <span class="hljs-string">&quot;random&quot;</span>:  # 对随机序列进行排序<br>        <span class="hljs-class"><span class="hljs-keyword">data</span> = list(<span class="hljs-title">range</span>(1, <span class="hljs-type">Data</span>.<span class="hljs-title">data_count</span> + 1))  # 生成序列 1 到 <span class="hljs-type">Data</span>.data_count 的整数列表</span><br>        random.shuffle(<span class="hljs-class"><span class="hljs-keyword">data</span>)  # 随机打乱列表</span><br>    elif dtype == <span class="hljs-string">&quot;reversed&quot;</span>:  # 按降序排序<br>        <span class="hljs-class"><span class="hljs-keyword">data</span> = list(<span class="hljs-title">range</span>(<span class="hljs-type">Data</span>.<span class="hljs-title">data_count</span>, 0, -1))  # 生成降序列表</span><br>    # ... 省略其他条件分支 ...<br>    return <span class="hljs-class"><span class="hljs-keyword">data</span></span><br></code></pre></td></tr></table></figure><p>核心功能的原理和作用：</p><ol><li><p><strong>随机序列</strong> (<code>&quot;random&quot;</code>):</p><ul><li><p>模拟大多数实际应用场景，元素初始状态无序。</p></li><li><p>使用 <code>range(1, Data.data_count + 1)</code> 生成一个从 1 到 <code>Data.data_count</code> 的整数序列。</p></li><li><p>调用 <code>random.shuffle(data)</code> 将列表中的元素随机打乱，为排序算法提供一个随机的初始状态。</p></li></ul></li><li><p><strong>降序序列</strong> (<code>&quot;reversed&quot;</code>):</p><ul><li><p>测试排序算法处理完全逆序的数据集的能力。</p></li><li><p>使用 <code>range(Data.data_count, 0, -1)</code> 生成一个从 <code>Data.data_count</code> 递减到 1 的整数序列，形成一个降序排列。</p></li></ul></li><li><p><strong>部分重复序列</strong> (<code>&quot;few-unique&quot;</code>):</p><ul><li><p>模拟具有大量重复元素的数据集，测试排序算法的效率。</p></li><li><p>将数据集划分为四部分，每部分包含数据集中的四分之一元素，每部分的元素值分别为 <code>d</code>, <code>d * 2</code>, <code>d * 3</code>，其中 <code>d = Data.data_count // 4</code>。</p></li><li><p>然后随机打乱整个列表，创建一个包含部分重复元素的数据集。</p></li></ul></li><li><p><strong>几乎已排序序列</strong> (<code>&quot;almost-sorted&quot;</code>):</p><ul><li><p>测试排序算法处理接近有序的数据集的性能。</p></li><li><p>首先生成一个从 1 到 <code>Data.data_count</code> 的升序列表。</p></li><li><p>随机选择两个位置 <code>a</code> 和 <code>b</code>，如果相同则重新选择 <code>b</code>，保证 <code>a != b</code>。</p></li><li><p>交换这两个位置的元素，从而创建一个除了一对元素外都已排序的数据集。</p></li></ul></li></ol><p>在 <code>draw_chart</code> 函数中，核心功能是生成一个动态图表来展示特定排序算法的过程。</p><p>以下是关键代码段的说明：</p><p><strong>关键代码段</strong></p><ol><li><p><strong>初始化图表和子图</strong>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fig</span> = plt.figure(<span class="hljs-number">1</span>, figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">9</span>))<br><span class="hljs-attribute">axs</span> = fig.add_subplot(<span class="hljs-number">111</span>)<br><span class="hljs-attribute">axs</span>.set_xticks([])<br><span class="hljs-attribute">axs</span>.set_yticks([])<br><span class="hljs-attribute">plt</span>.subplots_adjust(left=<span class="hljs-number">0</span>.<span class="hljs-number">01</span>, bottom=<span class="hljs-number">0</span>.<span class="hljs-number">02</span>, right=<span class="hljs-number">0</span>.<span class="hljs-number">99</span>, top=<span class="hljs-number">0</span>.<span class="hljs-number">95</span>, wspace=<span class="hljs-number">0</span>.<span class="hljs-number">05</span>, hspace=<span class="hljs-number">0</span>.<span class="hljs-number">15</span>)<br></code></pre></td></tr></table></figure><ul><li>创建一个新图表，并设置为16:9的尺寸。</li><li>添加一个子图。</li><li>隐藏坐标轴刻度，以便专注于排序动画。</li></ul></li><li><p><strong>转换原始数据并初始化动画帧</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">data_set</span> = [Data(d) for d in original_data]<br><span class="hljs-attr">frames</span> = funs[stype](data_set)<br></code></pre></td></tr></table></figure><ul><li>将原始数据转换为 <code>Data</code> 对象，这些对象包含了排序所需的所有信息，如值和颜色。</li><li>调用排序算法函数，获取整个排序过程的动画帧。</li></ul></li><li><p><strong>打印排序算法信息</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s: %d frames.&quot;</span> % (re.findall(<span class="hljs-string">r&quot;\w+ Sort&quot;</span>, titles[stype])[<span class="hljs-number">0</span>], <span class="hljs-built_in">len</span>(frames)))<br></code></pre></td></tr></table></figure><ul><li>打印排序算法的名称和动画帧总数。</li></ul></li><li><p><strong>定义动画函数</strong>：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">fi</span>):<br>    <span class="hljs-comment"># ... 动画绘制代码 ...</span><br></code></pre></td></tr></table></figure><ul><li>根据当前帧编号 <code>fi</code> 绘制柱状图，表示排序算法的当前状态。</li></ul></li><li><p><strong>创建动画对象</strong>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">anim = animation.FuncAnimation(fig, animate, <span class="hljs-attribute">frames</span>=len(frames), <span class="hljs-attribute">interval</span>=frame_interval)<br></code></pre></td></tr></table></figure><ul><li>使用 <code>FuncAnimation</code> 创建动画对象，指定动画函数、帧数和帧间隔。</li></ul></li><li><p><strong>返回绘图对象和动画对象</strong>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span> plt, anim<br></code></pre></td></tr></table></figure><ul><li>返回Matplotlib的绘图对象和动画对象，以便进一步操作或展示。</li></ul></li></ol><p>在 <code>draw_all_charts</code> 函数中，核心功能是创建一个包含所有排序算法动态图表的复合图表。</p><p>以下是关键代码段及其说明：</p><p><strong>关键代码段</strong></p><ol><li><p><strong>初始化图表和子图</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fig = plt.figure(<span class="hljs-number">1</span>, figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">9</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    axs.append(fig.add_subplot(<span class="hljs-number">331</span> + i))<br></code></pre></td></tr></table></figure><ul><li>创建一个新的图表，并为六种排序算法设置子图。</li></ul></li><li><p><strong>隐藏坐标轴</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">axs[-<span class="hljs-number">1</span>].set_xticks([])<br>axs[-<span class="hljs-number">1</span>].set_yticks([])<br></code></pre></td></tr></table></figure><ul><li>隐藏所有子图的坐标轴刻度，以便专注于排序动画。</li></ul></li><li><p><strong>调整子图布局</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.subplots_adjust(left=<span class="hljs-number">0.01</span>, bottom=<span class="hljs-number">0.02</span>, right=<span class="hljs-number">0.99</span>, top=<span class="hljs-number">0.95</span>, wspace=<span class="hljs-number">0.05</span>, hspace=<span class="hljs-number">0.15</span>)<br></code></pre></td></tr></table></figure><ul><li>在一个图表中展示多种排序算法，每种算法一个子图，方便比较它们的效率和排序过程。</li><li>调整子图的位置和间距，确保它们在图表中的布局整洁且舒适。</li></ul></li><li><p><strong>获取排序算法的动画帧</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    frames.append(funs[i](data_set))<br></code></pre></td></tr></table></figure><ul><li>为每种排序算法收集动画帧，每个动画帧代表排序过程中的一个步骤。</li></ul></li><li><p><strong>打印排序算法信息</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%-*s %*d frames&quot;</span> % (max_name_length, names[i], max_frame_length, frame_counts[i]))<br></code></pre></td></tr></table></figure><ul><li>提供用户友好的反馈，告知用户每种排序算法的名称和涉及的动画帧数。</li></ul></li><li><p><strong>定义动画函数</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">fi</span>):<br>    <span class="hljs-comment"># ... 动画绘制代码 ...</span><br></code></pre></td></tr></table></figure><ul><li>对于每种排序算法，绘制当前帧的柱状图。</li></ul></li><li><p><strong>创建动画对象</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">anim = animation.FuncAnimation(fig, animate, frames=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">len</span>(f) <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> frames), interval=frame_interval)<br></code></pre></td></tr></table></figure><ul><li>使用 <code>FuncAnimation</code> 连续播放所有排序算法的动画，允许用户同时观察所有算法的执行过程。</li></ul></li><li><p><strong>返回绘图对象和动画对象</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> plt, anim<br></code></pre></td></tr></table></figure><ul><li>返回Matplotlib的绘图对象和动画对象。</li></ul></li></ol><h4 id="3-1-2-排序动画"><a href="#3-1-2-排序动画" class="headerlink" title="3.1.2 排序动画"></a>3.1.2 排序动画</h4><p><strong>实现步骤：</strong></p><ol><li>初始化动画帧列表 <code>frames</code>。</li><li>复制数据集 <code>ds</code> 以避免直接修改原始数据。</li><li>通过两层循环实现冒泡排序，外层控制排序轮数，内层执行相邻元素的比较和交换。</li><li>每次交换后，添加当前状态到动画帧列表，并标记交换元素。</li><li>如果一轮排序未发生交换，提前结束排序，因为数据已经有序。</li><li>排序完成后，将最终排序状态添加到动画帧列表。</li><li>返回动画帧列表，供动画展示使用。</li></ol><h3 id="3-2-程序运行"><a href="#3-2-程序运行" class="headerlink" title="3.2 程序运行"></a>3.2 程序运行</h3><p>运行如下命令调用所有函数:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">python output.py arg1 <span class="hljs-comment">[arg2 <span class="hljs-comment">[arg3]</span>]</span>  <br></code></pre></td></tr></table></figure><p><strong>参数详情：</strong></p><p>参数1</p><ul><li><code>play</code>：在新窗口中播放特定排序算法或所有算法的动画，作为Matplotlib的“图形”。</li><li><code>save-html</code>：将动画保存为一系列图像的HTML页面。</li><li><code>save-mp4</code>：将动画保存为MP4视频。</li></ul><p>参数2</p><ul><li><code>all</code> (默认)：在动画中显示所有排序算法的可视化。</li><li><code>bubble-sort</code>：仅在动画中显示冒泡排序算法的可视化。</li><li><code>heap-sort</code>: 仅在动画中显示堆排序算法的可视化。</li><li><code>merge-sort</code>: 仅在动画中显示归并排序算法的可视化。</li><li><code>insertion-sort</code>: 仅在动画中显示直接插入排序算法的可视化。</li><li><code>selection-sort</code>: 仅在动画中显示选择排序算法的可视化。</li><li><code>quick-sort</code>: 仅在动画中显示快速排序算法的可视化。</li></ul><p>参数3</p><ul><li><p><code>random</code> (默认)：对随机序列进行排序。</p></li><li><p><code>almost-sorted</code>：对几乎已排序的序列进行排序。</p></li><li><p><code>few-unique</code>：对一些部分重复的序列进行排序。</p></li><li><p><code>reversed</code>：对降序序列进行排序。</p></li></ul><p><strong>示例</strong></p><ul><li>冒泡算法对降序序列排序</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">python output.py play bubble<span class="hljs-literal">-sort</span> reversed  <br></code></pre></td></tr></table></figure><table><thead><tr><th>排序前</th><th>排序后</th></tr></thead><tbody><tr><td><img src="http://cdn.ohheng.cn/202406121809579.jpg" alt="img"></td><td><img src="http://cdn.ohheng.cn/202406121809596.jpg" alt="img"></td></tr></tbody></table><ul><li>堆排序算法对随机序列排序</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">python output.py play heap<span class="hljs-literal">-sort</span>  <br></code></pre></td></tr></table></figure><table><thead><tr><th>排序前</th><th>排序后</th></tr></thead><tbody><tr><td><img src="http://cdn.ohheng.cn/202406121809589.jpg" alt="img"></td><td><img src="http://cdn.ohheng.cn/202406121809598.jpg" alt="img"></td></tr></tbody></table><ul><li>归并排序算法对一些部分重复的序列排序</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">python output.py play <span class="hljs-built_in">merge-sort</span> few<span class="hljs-literal">-unique</span>  <br></code></pre></td></tr></table></figure><table><thead><tr><th>排序前</th><th>排序后</th></tr></thead><tbody><tr><td><img src="http://cdn.ohheng.cn/202406121809603.jpg" alt="img"></td><td><img src="http://cdn.ohheng.cn/202406121809607.jpg" alt="img"></td></tr></tbody></table><ul><li>直接插入排序算法对几乎已排序的序列排序</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">python output.py play insertion<span class="hljs-literal">-sort</span>  almost<span class="hljs-literal">-sorted</span>     <br></code></pre></td></tr></table></figure><table><thead><tr><th>排序前</th><th>排序后</th></tr></thead><tbody><tr><td><img src="http://cdn.ohheng.cn/202406121812220.jpg" alt="img"></td><td><img src="http://cdn.ohheng.cn/202406121812980.jpg" alt="img"></td></tr></tbody></table><ul><li>所有排序算法对随机的序列排序</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">python output.py play     <br></code></pre></td></tr></table></figure><table><thead><tr><th>排序前</th><th>排序后</th></tr></thead><tbody><tr><td><img src="http://cdn.ohheng.cn/202406121809141.jpg" alt="img"></td><td><img src="http://cdn.ohheng.cn/202406121812496.jpg" alt="img"></td></tr></tbody></table><h2 id="4、测试与分析"><a href="#4、测试与分析" class="headerlink" title="4、测试与分析"></a>4、测试与分析</h2><table><thead><tr><th><strong>算法名称</strong></th><th><strong>时间复杂度（平均）</strong></th><th><strong>时间复杂度（最坏）</strong></th><th><strong>空间复杂度</strong></th><th><strong>稳定性</strong></th><th><strong>适用场景</strong></th><th><strong>示例数据集表现</strong></th></tr></thead><tbody><tr><td><strong>冒泡排序</strong></td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td><td>小规模数据或部分排序</td><td>慢</td></tr><tr><td><strong>堆排序</strong></td><td>O(n log n)</td><td>O(n log n)</td><td>O(1)</td><td>不稳定</td><td>大规模数据集</td><td>快</td></tr><tr><td><strong>归并排序</strong></td><td>O(n log n)</td><td>O(n log n)</td><td>O(n)</td><td>稳定</td><td>适合大数据量，可并行处理</td><td>快</td></tr><tr><td><strong>直接插入排序</strong></td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td><td>小规模数据集或初始有序数据</td><td>较慢</td></tr><tr><td><strong>选择排序</strong></td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>不稳定</td><td>实时添加元素的场景</td><td>慢</td></tr><tr><td><strong>快速排序</strong></td><td>O(n log n)</td><td>O(n^2)</td><td>O(log n)</td><td>不稳定</td><td>大规模数据集</td><td>快（平均情况）</td></tr></tbody></table><p>排序算法的选择取决于数据规模、内存限制以及是否需要算法稳定性。对于小数据集，简单算法如冒泡排序或直接插入排序足够有效。对于大数据集，更高效的算法如堆排序、归并排序和快速排序是更好的选择。归并排序虽然内存需求较高，但提供了稳定性和并行处理能力。快速排序在平均情况下速度最快，但在最坏情况下性能会下降。总体而言，算法的选择需要平衡时间效率、空间消耗和稳定性。</p><h2 id="5、结论与心得"><a href="#5、结论与心得" class="headerlink" title="5、结论与心得"></a>5、结论与心得</h2><p>在这次课程设计中，我深刻体会到了理论与实践相结合的重要性。项目的核心是开发一个排序算法可视化工具，这不仅让我对冒泡排序、快速排序等经典算法有了更深入的理解，也锻炼了我的编程实践能力。在实现过程中，我遇到了不少挑战，比如动画的流畅性、性能优化以及用户交互设计等。为了解决这些问题，我查阅了大量资料，学习了新的技术和方法，这个过程虽然充满挑战，但也让我获得了巨大的成就感。</p><p>我学会了如何合理规划时间，将大目标分解为小任务，并一步步地完成它们。在调试代码时，我意识到了代码规范和模块化设计的重要性，这有助于快速定位并解决问题。此外，我也认识到了团队协作的力量，与队友的有效沟通和分工合作是项目成功的关键。</p><p>尽管项目中有许多困难，但通过不懈努力，我克服了这些障碍，并从中学到了很多。例如，我学会了如何使用Matplotlib库来制作动画，以及如何通过命令行参数让用户自定义排序算法和数据类型。这些技能对我未来的学习和工作都将产生积极的影响。</p><p>遗憾的是，由于时间限制，项目中仍有一些想法未能实现，比如增加更多排序算法的展示，以及进一步优化用户界面。这些未完成的部分也给了我未来努力的方向。我计划在接下来的时间里，继续完善这个项目，探索更多的功能和优化。</p><p>总的来说，这次课程设计是一次宝贵的学习经历。它不仅提升了我的技术能力，还锻炼了我的问题解决能力和创新思维。我相信，通过这次项目的经验，我将更加自信地面对将来的挑战，并不断追求卓越。</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础数据结构</title>
    <link href="/2024/06/12/(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95)%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2024/06/12/(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95)%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>定义</strong></p><p>在计算机科学中，数组是由一组元素（值或变量）组成的数据结构，每个元素有至少一个索引或键来标识</p><blockquote><p>In computer science, an <strong>array</strong> is a data structure consisting of a collection of <em>elements</em> (values or variables), each identified by at least one <em>array index</em> or <em>key</em></p></blockquote><p>因为数组内的元素是<strong>连续存储</strong>的，所以数组中元素的地址，可以通过其索引计算出来，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><p>知道了数组的<strong>数据</strong>起始地址 $BaseAddress$，就可以由公式 $BaseAddress + i * size$ 计算出索引 $i$ 元素的地址</p><ul><li>$i$ 即索引，在 Java、C 等语言都是从 0 开始</li><li>$size$ 是每个元素占用字节，例如 $int$ 占 $4$，$double$ 占 $8$</li></ul><p><strong>小测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] array = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><p>已知 array 的<strong>数据</strong>的起始地址是 0x7138f94c8，那么元素 3 的地址是什么？</p><blockquote><p>答：0x7138f94c8 + 2 * 1 &#x3D; 0x7138f94ca</p></blockquote><p><strong>空间占用</strong></p><p>Java 中数组结构为</p><ul><li>8 字节 markword</li><li>4 字节 class 指针（压缩 class 指针的情况）</li><li>4 字节 数组大小（决定了数组最大容量是 $2^{32}$）</li><li>数组元素 + 对齐字节（java 中所有对象大小都是 8 字节的整数倍[^12]，不足的要用对齐字节补足）</li></ul><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><p>的大小为 40 个字节，组成如下</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">8 </span>+ <span class="hljs-number">4</span> + <span class="hljs-number">4</span> + <span class="hljs-number">5</span>*<span class="hljs-number">4</span> + <span class="hljs-number">4</span>(alignment)<br></code></pre></td></tr></table></figure><p><strong>随机访问性能</strong></p><p>即根据索引查找元素，时间复杂度是 $O(1)$</p><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><p><strong>java 版本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicArray</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;Integer&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 逻辑大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>; <span class="hljs-comment">// 容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] array = &#123;&#125;;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向最后位置 [size] 添加元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element 待添加元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> element)</span> &#123;<br>        add(size, element);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向 [0 .. size] 位置添加元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index   索引位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> element 待添加元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> element)</span> &#123;<br>        checkAndGrow();<br><br>        <span class="hljs-comment">// 添加逻辑</span><br>        <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; size) &#123;<br>            <span class="hljs-comment">// 向后挪动, 空出待插入位置</span><br>            System.arraycopy(array, index,<br>                    array, index + <span class="hljs-number">1</span>, size - index);<br>        &#125;<br>        array[index] = element;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkAndGrow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 容量检查</span><br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[capacity];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (size == capacity) &#123;<br>            <span class="hljs-comment">// 进行扩容, 1.5 1.618 2</span><br>            capacity += capacity &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span>[] newArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[capacity];<br>            System.arraycopy(array, <span class="hljs-number">0</span>,<br>                    newArray, <span class="hljs-number">0</span>, size);<br>            array = newArray;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从 [0 .. size) 范围删除元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 被删除元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123; <span class="hljs-comment">// [0..size)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> array[index];<br>        <span class="hljs-keyword">if</span> (index &lt; size - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 向前挪动</span><br>            System.arraycopy(array, index + <span class="hljs-number">1</span>,<br>                    array, index, size - index - <span class="hljs-number">1</span>);<br>        &#125;<br>        size--;<br>        <span class="hljs-keyword">return</span> removed;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引位置, 在 [0..size) 区间内</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 该索引位置的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> array[index];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 遍历方法1</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> consumer 遍历要执行的操作, 入参: 每个元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foreach</span><span class="hljs-params">(Consumer&lt;Integer&gt; consumer)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-comment">// 提供 array[i]</span><br>            <span class="hljs-comment">// 返回 void</span><br>            consumer.accept(array[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 遍历方法2 - 迭代器遍历</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;Integer&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 有没有下一个元素</span><br>                <span class="hljs-keyword">return</span> i &lt; size;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 返回当前元素,并移动到下一个元素</span><br>                <span class="hljs-keyword">return</span> array[i++];<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 遍历方法3 - stream 遍历</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> stream 流</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> IntStream <span class="hljs-title function_">stream</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> IntStream.of(Arrays.copyOfRange(array, <span class="hljs-number">0</span>, size));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这些方法实现，都简化了 index 的有效性判断，假设输入的 index 都是合法的</li></ul><p><strong>插入或删除性能</strong></p><p>头部位置，时间复杂度是 $O(n)$</p><p>中间位置，时间复杂度是 $O(n)$</p><p>尾部位置，时间复杂度是 $O(1)$（均摊来说）</p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] array = &#123;<br>    &#123;<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>&#125;,<br>    &#123;<span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>&#125;,<br>    &#123;<span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>内存图如下</p><img src="http://cdn.ohheng.cn/202406121512332.png" alt="image-20221104114132056" style="zoom:67%;" /><ul><li><p>二维数组占 32 个字节，其中 array[0]，array[1]，array[2] 三个元素分别保存了指向三个一维数组的引用</p></li><li><p>三个一维数组各占 40 个字节</p></li><li><p>它们在内层布局上是<strong>连续</strong>的</p></li></ul><p>更一般的，对一个二维数组 $Array[m][n]$</p><ul><li>$m$ 是外层数组的长度，可以看作 row 行</li><li>$n$ 是内层数组的长度，可以看作 column 列</li><li>当访问 $Array[i][j]$，$0\leq i \lt m, 0\leq j \lt n$时，就相当于<ul><li>先找到第 $i$ 个内层数组（行）</li><li>再找到此内层数组中第 $j$ 个元素（列）</li></ul></li></ul><p><strong>小测试</strong></p><p>Java 环境下（不考虑类指针和引用压缩，此为默认情况），有下面的二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[][] array = &#123;<br>    &#123;<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>&#125;,<br>    &#123;<span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>&#125;,<br>    &#123;<span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>已知 array <strong>对象</strong>起始地址是 0x1000，那么 23 这个元素的地址是什么？</p><blockquote><p>答：</p><ul><li>起始地址 0x1000</li><li>外层数组大小：16字节对象头 + 3元素 * 每个引用4字节 + 4 对齐字节 &#x3D; 32 &#x3D; 0x20</li><li>第一个内层数组大小：16字节对象头 + 5元素 * 每个byte1字节 + 3 对齐字节 &#x3D; 24 &#x3D; 0x18</li><li>第二个内层数组，16字节对象头 &#x3D; 0x10，待查找元素索引为 2</li><li>最后结果 &#x3D; 0x1000 + 0x20 + 0x18 + 0x10 + 2*1 &#x3D; 0x104a</li></ul></blockquote><h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><p>这里只讨论空间局部性</p><ul><li>cpu 读取内存（速度慢）数据后，会将其放入高速缓存（速度快）当中，如果后来的计算再用到此数据，在缓存中能读到的话，就不必读内存了</li><li>缓存的最小存储单位是缓存行（cache line），一般是 64 bytes，一次读的数据少了不划算啊，因此最少读 64 bytes 填满一个缓存行，因此读入某个数据时也会读取其<strong>临近的数据</strong>，这就是所谓<strong>空间局部性</strong></li></ul><p><strong>对效率的影响</strong></p><p>比较下面 ij 和 ji 两个方法的执行效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000000</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">columns</span> <span class="hljs-operator">=</span> <span class="hljs-number">14</span>;<br><span class="hljs-type">int</span>[][] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[rows][columns];<br><br><span class="hljs-type">StopWatch</span> <span class="hljs-variable">sw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>sw.start(<span class="hljs-string">&quot;ij&quot;</span>);<br>ij(a, rows, columns);<br>sw.stop();<br>sw.start(<span class="hljs-string">&quot;ji&quot;</span>);<br>ji(a, rows, columns);<br>sw.stop();<br>System.out.println(sw.prettyPrint());<br></code></pre></td></tr></table></figure><p>ij 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ij</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] a, <span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> columns)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; rows; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; columns; j++) &#123;<br>            sum += a[i][j];<br>        &#125;<br>    &#125;<br>    System.out.println(sum);<br>&#125;<br></code></pre></td></tr></table></figure><p>ji 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ji</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] a, <span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> columns)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; columns; j++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; rows; i++) &#123;<br>            sum += a[i][j];<br>        &#125;<br>    &#125;<br>    System.out.println(sum);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">0<br>0<br><span class="hljs-section">StopWatch &#x27;&#x27;: running time = 96283300 ns</span><br><span class="hljs-section">---------------------------------------------</span><br><span class="hljs-section">ns         %     Task name</span><br><span class="hljs-section">---------------------------------------------</span><br>016196200  017%  ij<br>080087100  083%  ji<br></code></pre></td></tr></table></figure><p>可以看到 ij 的效率比 ji 快很多，为什么呢？</p><ul><li>缓存是有限的，当新数据来了后，一些旧的缓存行数据就会被覆盖</li><li>如果不能充分利用缓存的数据，就会造成效率低下</li></ul><p>以 ji 执行为例，第一次内循环要读入 $[0,0]$ 这条数据，由于局部性原理，读入 $[0,0]$ 的同时也读入了 $[0,1] … [0,13]$，如图所示</p><p><img src="http://cdn.ohheng.cn/202406121517637.png" alt="image-20221104164329026"></p><p>但很遗憾，第二次内循环要的是 $[1,0]$ 这条数据，缓存中没有，于是再读入了下图的数据</p><p><img src="http://cdn.ohheng.cn/202406121518343.png" alt="image-20221104164716282"></p><p>这显然是一种浪费，因为 $[0,1] … [0,13]$ 包括 $[1,1] … [1,13]$ 这些数据虽然读入了缓存，却没有及时用上，而缓存的大小是有限的，等执行到第九次内循环时</p><p><img src="http://cdn.ohheng.cn/202406121514921.png" alt="image-20221104164947154"></p><p>缓存的第一行数据已经被新的数据 $[8,0] … [8,13]$ 覆盖掉了，以后如果再想读，比如 $[0,1]$，又得到内存去读了</p><p>同理可以分析 ij 函数则能充分利用局部性原理加载到的缓存数据</p><p><strong>举一反三</strong></p><ol><li><p>I&#x2F;O 读写时同样可以体现局部性原理</p></li><li><p>数组可以充分利用局部性原理，那么链表呢？</p><blockquote><p>答：链表不行，因为链表的元素并非相邻存储</p></blockquote></li></ol><h3 id="越界检查"><a href="#越界检查" class="headerlink" title="越界检查"></a>越界检查</h3><p>java 中对数组元素的读写都有越界检查，类似于下面的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_within_bounds</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> <span class="hljs-type">const</span>        </span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> &lt;= index &amp;&amp; index &lt; <span class="hljs-built_in">length</span>(); <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代码位置：<code>openjdk\src\hotspot\share\oops\arrayOop.hpp</code></li></ul><p>只不过此检查代码，不需要由程序员自己来调用，JVM 会帮我们调用</p><h2 id="2-链表"><a href="#2-链表" class="headerlink" title="2. 链表"></a>2. 链表</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><strong>定义</strong></p><p>在计算机科学中，链表是数据元素的线性集合，其每个元素都指向下一个元素，元素存储上并不连续</p><blockquote><p>In computer science, a <strong>linked list</strong> is a linear collection of data elements whose order is not given by their physical placement in memory. Instead, each element points to the next. </p></blockquote><p>可以分类为[^5]</p><ul><li>单向链表，每个元素只知道其下一个元素是谁</li></ul><p><img src="http://cdn.ohheng.cn/202406121513167.png" alt="image-20221110083407176"></p><ul><li>双向链表，每个元素知道其上一个元素和下一个元素</li></ul><p><img src="http://cdn.ohheng.cn/202406121518471.png" alt="image-20221110083427372"></p><ul><li>循环链表，通常的链表尾节点 tail 指向的都是 null，而循环链表的 tail 指向的是头节点 head</li></ul><p><img src="http://cdn.ohheng.cn/202406121519158.png" alt="image-20221110083538273"></p><p>链表内还有一种特殊的节点称为哨兵（Sentinel）节点，也叫做哑元（ Dummy）节点，它不存储数据，通常用作头尾，用来简化边界判断，如下图所示</p><p><img src="http://cdn.ohheng.cn/202406121519892.png" alt="image-20221110084611550"></p><p><strong>随机访问性能</strong></p><p>根据 index 查找，时间复杂度 $O(n)$</p><p><strong>插入或删除性能</strong></p><ul><li>起始位置：$O(1)$</li><li>结束位置：如果已知 tail 尾节点是 $O(1)$，不知道 tail 尾节点是 $O(n)$</li><li>中间位置：根据 index 查找时间 + $O(1)$</li></ul><h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><p>根据单向链表的定义，首先定义一个存储 value 和 next 指针的类 Node，和一个描述头部节点的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> Node head; <span class="hljs-comment">// 头部节点</span><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123; <span class="hljs-comment">// 节点类</span><br>        <span class="hljs-type">int</span> value;<br>        Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Node 定义为内部类，是为了对外<strong>隐藏</strong>实现细节，没必要让类的使用者关心 Node 结构</li><li>定义为 static 内部类，是因为 Node <strong>不需要</strong>与 SinglyLinkedList 实例相关，多个 SinglyLinkedList实例能共用 Node 类定义</li></ul><p><strong>头部添加</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br><span class="hljs-built_in">this</span>.head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, <span class="hljs-built_in">this</span>.head);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果 this.head &#x3D;&#x3D; null，新增节点指向 null，并作为新的 this.head</li><li>如果 this.head !&#x3D; null，新增节点指向原来的 this.head，并作为新的 this.head<ul><li>注意赋值操作执行顺序是从右到左</li></ul></li></ul><p><strong>while 遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 做一些事</span><br>            curr = curr.next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>for 遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.head; curr != <span class="hljs-literal">null</span>; curr = curr.next) &#123;<br>            <span class="hljs-comment">// 做一些事</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>以上两种遍历都可以把<strong>要做的事</strong>以 Consumer 函数的方式传递进来<ul><li>Consumer 的规则是<strong>一个参数</strong>，<strong>无返回值</strong>，因此像 System.out::println 方法等都是 Consumer</li><li>调用 Consumer 时，将当前节点 curr.value 作为参数传递给它</li></ul></li></ul><p><strong>迭代器遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;Integer&gt; &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NodeIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;Integer&gt; &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> head;<br>        <br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> curr != <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> curr.value;<br>            curr = curr.next;<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Iterator&lt;Integer&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NodeIterator</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>hasNext 用来判断是否还有必要调用 next</li><li>next 做两件事<ul><li>返回当前节点的 value</li><li>指向下一个节点</li></ul></li><li>NodeIterator 要定义为<strong>非 static 内部类</strong>，是因为它与 SinglyLinkedList 实例相关，是对某个 SinglyLinkedList 实例的迭代</li></ul><p><strong>递归遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;Integer&gt; &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>        recursion(<span class="hljs-built_in">this</span>.head);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recursion</span><span class="hljs-params">(Node curr)</span> &#123;<br>        <span class="hljs-keyword">if</span> (curr == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 前面做些事</span><br>        recursion(curr.next);<br>        <span class="hljs-comment">// 后面做些事</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>尾部添加</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.head == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        Node curr;<br>        <span class="hljs-keyword">for</span> (curr = <span class="hljs-built_in">this</span>.head; curr.next != <span class="hljs-literal">null</span>; ) &#123;<br>            curr = curr.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> curr;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> findLast();<br>        <span class="hljs-keyword">if</span> (last == <span class="hljs-literal">null</span>) &#123;<br>            addFirst(value);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        last.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意，找最后一个节点，终止条件是 curr.next &#x3D;&#x3D; null </li><li>分成两个方法是为了代码清晰，而且 findLast() 之后还能复用</li></ul><p><strong>尾部添加多个</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span> &#123;<br>    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> first, <span class="hljs-type">int</span>... rest)</span> &#123;<br>        <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">sublist</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(first, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> sublist;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : rest) &#123;<br>            curr.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, <span class="hljs-literal">null</span>);<br>            curr = curr.next;<br>        &#125;<br>        <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> findLast();<br>        <span class="hljs-keyword">if</span> (last == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.head = sublist;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        last.next = sublist;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>先串成一串 sublist</li><li>再作为一个整体添加</li></ul><p><strong>根据索引获取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span> &#123;<br>    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.head; curr != <span class="hljs-literal">null</span>; curr = curr.next, i++) &#123;<br>            <span class="hljs-keyword">if</span> (index == i) &#123;<br>                <span class="hljs-keyword">return</span> curr;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> IllegalArgumentException <span class="hljs-title function_">illegalIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(String.format(<span class="hljs-string">&quot;index [%d] 不合法%n&quot;</span>, index));<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> findNode(index);<br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> node.value;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> illegalIndex(index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>同样，分方法可以实现复用</li></ul><p><strong>插入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span> &#123;<br>    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            addFirst(value);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>); <span class="hljs-comment">// 找到上一个节点</span><br>        <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 找不到</span><br>            <span class="hljs-keyword">throw</span> illegalIndex(index);<br>        &#125;<br>        prev.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, prev.next);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>插入包括下面的删除，都必须找到上一个节点</li></ul><p><strong>删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedList</span> &#123;<br>    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.head != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.head = <span class="hljs-built_in">this</span>.head.next;<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> illegalIndex(index);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);<br>        Node curr;<br>        <span class="hljs-keyword">if</span> (prev != <span class="hljs-literal">null</span> &amp;&amp; (curr = prev.next) != <span class="hljs-literal">null</span>) &#123;<br>            prev.next = curr.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex(index);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第一个 if 块对应着 removeFirst 情况</li><li>最后一个 if 块对应着至少得两个节点的情况<ul><li>不仅仅判断上一个节点非空，还要保证当前节点非空</li></ul></li></ul><h3 id="单向链表（带哨兵）"><a href="#单向链表（带哨兵）" class="headerlink" title="单向链表（带哨兵）"></a>单向链表（带哨兵）</h3><p>观察之前单向链表的实现，发现每个方法内几乎都有判断是不是 head 这样的代码，能不能简化呢？</p><p>用一个不参与数据存储的特殊 Node 作为哨兵，它一般被称为哨兵或哑元，拥有哨兵节点的链表称为带头链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedListSentinel</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Integer.MIN_VALUE, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>具体存什么值无所谓，因为不会用到它的值</li></ul><p>加入哨兵节点后，代码会变得比较简单，先看几个工具方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedListSentinel</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-comment">// 根据索引获取节点</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.head; curr != <span class="hljs-literal">null</span>; curr = curr.next, i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == index) &#123;<br>                <span class="hljs-keyword">return</span> curr;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 获取最后一个节点</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findLast</span><span class="hljs-params">()</span> &#123;<br>        Node curr;<br>        <span class="hljs-keyword">for</span> (curr = <span class="hljs-built_in">this</span>.head; curr.next != <span class="hljs-literal">null</span>; ) &#123;<br>            curr = curr.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> curr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>findNode 与之前类似，只是 i 初始值设置为 -1 对应哨兵，实际传入的 index 也是 $[-1, \infty)$</li><li>findLast 绝不会返回 null 了，就算没有其它节点，也会返回哨兵作为最后一个节点</li></ul><p>这样，代码简化为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyLinkedListSentinel</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> findLast();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        改动前</span><br><span class="hljs-comment">        if (last == null) &#123;</span><br><span class="hljs-comment">            this.head = new Node(value, null);</span><br><span class="hljs-comment">            return;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br>        last.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, <span class="hljs-literal">null</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        改动前</span><br><span class="hljs-comment">        if (index == 0) &#123;</span><br><span class="hljs-comment">            this.head = new Node(value, this.head);</span><br><span class="hljs-comment">            return;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-comment">// index 传入 0 时，返回的是哨兵</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (prev != <span class="hljs-literal">null</span>) &#123;<br>            prev.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, prev.next);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex(index);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        改动前</span><br><span class="hljs-comment">        if (index == 0) &#123;</span><br><span class="hljs-comment">            if (this.head != null) &#123;</span><br><span class="hljs-comment">                this.head = this.head.next;</span><br><span class="hljs-comment">                return;</span><br><span class="hljs-comment">            &#125; else &#123;</span><br><span class="hljs-comment">                throw illegalIndex(index);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-comment">// index 传入 0 时，返回的是哨兵</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);<br>        Node curr;<br>        <span class="hljs-keyword">if</span> (prev != <span class="hljs-literal">null</span> &amp;&amp; (curr = prev.next) != <span class="hljs-literal">null</span>) &#123;<br>            prev.next = curr.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex(index);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        改动前</span><br><span class="hljs-comment">        this.head = new Node(value, this.head);</span><br><span class="hljs-comment">        */</span><br><span class="hljs-built_in">this</span>.head.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value, <span class="hljs-built_in">this</span>.head.next);<br>        <span class="hljs-comment">// 也可以视为 insert 的特例, 即 insert(0, value);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>对于删除，前面说了【最后一个 if 块对应着至少得两个节点的情况】，现在有了哨兵，就凑足了两个节点</li></ul><h3 id="双向链表（带哨兵）"><a href="#双向链表（带哨兵）" class="headerlink" title="双向链表（带哨兵）"></a>双向链表（带哨兵）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoublyLinkedListSentinel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;Integer&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Node head;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Node tail;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DoublyLinkedListSentinel</span><span class="hljs-params">()</span> &#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">666</span>, <span class="hljs-literal">null</span>);<br>        tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">888</span>, <span class="hljs-literal">null</span>);<br>        head.next = tail;<br>        tail.prev = head;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findNode</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head; p != tail; p = p.next, i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == index) &#123;<br>                <span class="hljs-keyword">return</span> p;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        insert(<span class="hljs-number">0</span>, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span> &#123;<br>        remove(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> tail.prev;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">added</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(prev, value, tail);<br>        prev.next = added;<br>        tail.prev = added;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> tail.prev;<br>        <span class="hljs-keyword">if</span> (removed == head) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> removed.prev;<br>        prev.next = tail;<br>        tail.prev = prev;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex(index);<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> prev.next;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">inserted</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(prev, value, next);<br>        prev.next = inserted;<br>        next.prev = inserted;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> findNode(index - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex(index);<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> prev.next;<br>        <span class="hljs-keyword">if</span> (removed == tail) &#123;<br>            <span class="hljs-keyword">throw</span> illegalIndex(index);<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> removed.next;<br>        prev.next = next;<br>        next.prev = prev;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> IllegalArgumentException <span class="hljs-title function_">illegalIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<br>                String.format(<span class="hljs-string">&quot;index [%d] 不合法%n&quot;</span>, index));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;Integer&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head.next;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != tail;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> p.value;<br>                p = p.next;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        Node prev;<br>        <span class="hljs-type">int</span> value;<br>        Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Node prev, <span class="hljs-type">int</span> value, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="环形链表（带哨兵）"><a href="#环形链表（带哨兵）" class="headerlink" title="环形链表（带哨兵）"></a>环形链表（带哨兵）</h3><p>双向环形链表带哨兵，这时哨兵<strong>既作为头，也作为尾</strong></p><p><img src="http://cdn.ohheng.cn/202406121519007.png" alt="image-20221229144232651"></p><p><img src="http://cdn.ohheng.cn/202406121520940.png" alt="image-20221229143756065"></p><p><img src="http://cdn.ohheng.cn/202406121520246.png" alt="image-20221229153338425"></p><p><img src="http://cdn.ohheng.cn/202406121520474.png" alt="image-20221229154248800"></p><p>参考实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoublyLinkedListSentinel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;Integer&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;Integer&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;&gt;() &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> sentinel.next;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != sentinel;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> p.value;<br>                p = p.next;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        Node prev;<br>        <span class="hljs-type">int</span> value;<br>        Node next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Node prev, <span class="hljs-type">int</span> value, Node next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">sentinel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>, -<span class="hljs-number">1</span>, <span class="hljs-literal">null</span>); <span class="hljs-comment">// 哨兵</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DoublyLinkedListSentinel</span><span class="hljs-params">()</span> &#123;<br>        sentinel.next = sentinel;<br>        sentinel.prev = sentinel;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加到第一个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 待添加值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> sentinel.next;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> sentinel;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">added</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(prev, value, next);<br>        prev.next = added;<br>        next.prev = added;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加到最后一个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 待添加值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> sentinel.prev;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> sentinel;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">added</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(prev, value, next);<br>        prev.next = added;<br>        next.prev = added;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除第一个</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> sentinel.next;<br>        <span class="hljs-keyword">if</span> (removed == sentinel) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sentinel;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> removed.next;<br>        a.next = b;<br>        b.prev = a;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除最后一个</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> sentinel.prev;<br>        <span class="hljs-keyword">if</span> (removed == sentinel) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;非法&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> removed.prev;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sentinel;<br>        a.next = b;<br>        b.prev = a;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据值删除节点</span><br><span class="hljs-comment">     * &lt;p&gt;假定 value 在链表中作为 key, 有唯一性&lt;/p&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 待删除值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeByValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> findNodeByValue(value);<br>        <span class="hljs-keyword">if</span> (removed != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> removed.prev;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> removed.next;<br>            prev.next = next;<br>            next.prev = prev;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findNodeByValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> sentinel.next;<br>        <span class="hljs-keyword">while</span> (p != sentinel) &#123;<br>            <span class="hljs-keyword">if</span> (p.value == value) &#123;<br>                <span class="hljs-keyword">return</span> p;<br>            &#125;<br>            p = p.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-递归"><a href="#3-递归" class="headerlink" title="3. 递归"></a>3. 递归</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p><strong>定义</strong></p><p>计算机科学中，递归是一种解决计算问题的方法，其中解决方案取决于同一类问题的更小子集</p><blockquote><p>In computer science, <strong>recursion</strong> is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem.</p></blockquote><p>比如单链表递归遍历的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    println(<span class="hljs-string">&quot;before:&quot;</span> + node.value)<br>    f(node.next);<br>    println(<span class="hljs-string">&quot;after:&quot;</span> + node.value)<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>自己调用自己，如果说每个函数对应着一种解决方案，自己调用自己意味着解决方案是一样的（有规律的）</li><li>每次调用，函数处理的数据会较上次缩减（子集），而且最后会缩减至无需继续递归</li><li>内层函数调用（子集处理）完成，外层函数才能算调用完成</li></ol><p><strong>原理</strong></p><p>假设链表中有 3 个节点，value 分别为 1，2，3，以上代码的执行流程就类似于下面的<strong>伪码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1 -&gt; 2 -&gt; 3 -&gt; null  f(1)</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(Node node = <span class="hljs-number">1</span>)</span> &#123;<br>    println(<span class="hljs-string">&quot;before:&quot;</span> + node.value) <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(Node node = <span class="hljs-number">2</span>)</span> &#123;<br>        println(<span class="hljs-string">&quot;before:&quot;</span> + node.value) <span class="hljs-comment">// 2</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(Node node = <span class="hljs-number">3</span>)</span> &#123;<br>            println(<span class="hljs-string">&quot;before:&quot;</span> + node.value) <span class="hljs-comment">// 3</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(Node node = <span class="hljs-literal">null</span>)</span> &#123;<br>                <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            println(<span class="hljs-string">&quot;after:&quot;</span> + node.value) <span class="hljs-comment">// 3</span><br>        &#125;<br>        println(<span class="hljs-string">&quot;after:&quot;</span> + node.value) <span class="hljs-comment">// 2</span><br>    &#125;<br>    println(<span class="hljs-string">&quot;after:&quot;</span> + node.value) <span class="hljs-comment">// 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>思路</strong></p><ol><li>确定能否使用递归求解</li><li>推导出递推关系，即父问题与子问题的关系，以及递归的结束条件</li></ol><p>例如之前遍历链表的递推关系为<br>$$<br>f(n) &#x3D;<br>\begin{cases}<br>停止&amp; n &#x3D; null \<br>f(n.next) &amp; n \neq null<br>\end{cases}<br>$$</p><ul><li>深入到最里层叫做<strong>递</strong></li><li>从最里层出来叫做<strong>归</strong></li><li>在<strong>递</strong>的过程中，外层函数内的局部变量（以及方法参数）并未消失，<strong>归</strong>的时候还可以用到</li></ul><h3 id="单路递归-Single-Recursion"><a href="#单路递归-Single-Recursion" class="headerlink" title="单路递归 Single Recursion"></a>单路递归 Single Recursion</h3><p><strong>E01. 阶乘</strong></p><p>用递归方法求阶乘 </p><ul><li><p>阶乘的定义 $n!&#x3D; 1⋅2⋅3⋯(n-2)⋅(n-1)⋅n$，其中 $n$ 为自然数，当然 $0! &#x3D; 1$</p></li><li><p>递推关系</p></li></ul><p>$$<br>f(n) &#x3D;<br>\begin{cases}<br>1 &amp; n &#x3D; 1\<br>n * f(n-1) &amp; n &gt; 1<br>\end{cases}<br>$$</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n * f(n - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>拆解<strong>伪码</strong>如下，假设 n 初始值为 3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">f(<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>) &#123; <span class="hljs-comment">// 解决不了,递</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * f(<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 解决不了,继续递</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * f(<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 可以解决, 开始归</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>E02. 反向打印字符串</strong></p><p>用递归反向打印字符串，n 为字符在整个字符串 str 中的索引位置</p><ul><li><strong>递</strong>：n 从 0 开始，每次 n + 1，一直递到 n &#x3D;&#x3D; str.length() - 1</li><li><strong>归</strong>：从 n &#x3D;&#x3D; str.length() 开始归，从归打印，自然是逆序的</li></ul><p>递推关系<br>$$<br>f(n) &#x3D;<br>\begin{cases}<br>停止 &amp; n &#x3D; str.length() \<br>f(n+1) &amp; 0 \leq n \leq str.length() - 1<br>\end{cases}<br>$$<br>代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reversePrint</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index == str.length()) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    reversePrint(str, index + <span class="hljs-number">1</span>);<br>    System.out.println(str.charAt(index));<br>&#125;<br></code></pre></td></tr></table></figure><p>拆解<strong>伪码</strong>如下，假设字符串为 “abc”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">reversePrint</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>)</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reversePrint</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> index = <span class="hljs-number">1</span>)</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">reversePrint</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> index = <span class="hljs-number">2</span>)</span> &#123;<br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">reversePrint</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> index = <span class="hljs-number">3</span>)</span> &#123; <br>                <span class="hljs-keyword">if</span> (index == str.length()) &#123;<br>                    <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 开始归</span><br>                &#125;<br>            &#125;<br>            System.out.println(str.charAt(index)); <span class="hljs-comment">// 打印 c</span><br>        &#125;<br>        System.out.println(str.charAt(index)); <span class="hljs-comment">// 打印 b</span><br>    &#125;<br>    System.out.println(str.charAt(index)); <span class="hljs-comment">// 打印 a</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多路递归-Multi-Recursion"><a href="#多路递归-Multi-Recursion" class="headerlink" title="多路递归 Multi Recursion"></a>多路递归 Multi Recursion</h3><p><strong>E01. 斐波那契数列</strong></p><ul><li>之前的例子是每个递归函数只包含一个自身的调用，这称之为 single recursion</li><li>如果每个递归函数例包含多个自身调用，称之为 multi recursion</li></ul><p><strong>递推关系</strong><br>$$<br>f(n) &#x3D;<br>\begin{cases}<br>0 &amp; n&#x3D;0 \<br>1 &amp; n&#x3D;1 \<br>f(n-1) + f(n-2) &amp; n&gt;1<br>\end{cases}<br>$$</p><p>下面的表格列出了数列的前几项</p><table><thead><tr><th><em>F</em>0</th><th><em>F</em>1</th><th><em>F</em>2</th><th><em>F</em>3</th><th><em>F</em>4</th><th><em>F</em>5</th><th><em>F</em>6</th><th><em>F</em>7</th><th><em>F</em>8</th><th><em>F</em>9</th><th><em>F</em>10</th><th><em>F</em>11</th><th><em>F</em>12</th><th><em>F</em>13</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>21</td><td>34</td><td>55</td><td>89</td><td>144</td><td>233</td></tr></tbody></table><p><strong>实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f(n - <span class="hljs-number">1</span>) + f(n - <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行流程</strong></p><p><img src="http://cdn.ohheng.cn/202406121542616.gif" alt="2"></p><ul><li>绿色代表正在执行（对应递），灰色代表执行结束（对应归）</li><li>递不到头，不能归，对应着深度优先搜索</li></ul><p><strong>时间复杂度</strong></p><ul><li>递归的次数也符合斐波那契规律，$2 * f(n+1)-1$</li><li>时间复杂度推导过程<ul><li>斐波那契通项公式 $f(n) &#x3D; \frac{1}{\sqrt{5}}*({\frac{1+\sqrt{5}}{2}}^n - {\frac{1-\sqrt{5}}{2}}^n)$</li><li>简化为：$f(n) &#x3D; \frac{1}{2.236}*({1.618}^n - {(-0.618)}^n)$</li><li>带入递归次数公式 $2<em>\frac{1}{2.236}</em>({1.618}^{n+1} - {(-0.618)}^{n+1})-1$</li><li>时间复杂度为 $\Theta(1.618^n)$</li></ul></li></ul><blockquote><ol><li>更多 Fibonacci 参考[^8][^9][^10]</li><li>以上时间复杂度分析，未考虑大数相加的因素</li></ol></blockquote><p><strong>变体1 - 兔子问题[^8]</strong></p><p><img src="http://cdn.ohheng.cn/202406121541788.png" alt="image-20221110155655827"></p><ul><li>第一个月，有一对未成熟的兔子（黑色，注意图中个头较小）</li><li>第二个月，它们成熟</li><li>第三个月，它们能产下一对新的小兔子（蓝色）</li><li>所有兔子遵循相同规律，求第 $n$ 个月的兔子数</li></ul><p><strong>分析</strong></p><p>兔子问题如何与斐波那契联系起来呢？设第 n 个月兔子数为 $f(n)$</p><ul><li>$f(n)$ &#x3D; 上个月兔子数 + 新生的小兔子数</li><li>而【新生的小兔子数】实际就是【上个月成熟的兔子数】</li><li>因为需要一个月兔子就成熟，所以【上个月成熟的兔子数】也就是【上上个月的兔子数】</li><li>上个月兔子数，即 $f(n-1)$</li><li>上上个月的兔子数，即 $f(n-2)$</li></ul><p>因此本质还是斐波那契数列，只是从其第一项开始</p><p><strong>变体2 - 青蛙爬楼梯</strong></p><ul><li>楼梯有 $n$ 阶</li><li>青蛙要爬到楼顶，可以一次跳一阶，也可以一次跳两阶</li><li>只能向上跳，问有多少种跳法</li></ul><p><strong>分析</strong></p><table><thead><tr><th>n</th><th>跳法</th><th>规律</th></tr></thead><tbody><tr><td>1</td><td>(1)</td><td>暂时看不出</td></tr><tr><td>2</td><td>(1,1)  (2)</td><td>暂时看不出</td></tr><tr><td>3</td><td>(1,1,1)  (1,2)  (2,1)</td><td>暂时看不出</td></tr><tr><td>4</td><td>(1,1,1,1)    (1,2,1)    (2,1,1)<br />(1,1,2)  (2,2)</td><td>最后一跳，跳一个台阶的，基于f(3)<br />最后一跳，跳两个台阶的，基于f(2)</td></tr><tr><td>5</td><td>…</td><td>…</td></tr></tbody></table><ul><li><p>因此本质上还是斐波那契数列，只是从其第二项开始</p></li><li><p>对应 leetcode 题目 <a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯 - 力扣（LeetCode）</a></p></li></ul><h3 id="递归优化-记忆法"><a href="#递归优化-记忆法" class="headerlink" title="递归优化-记忆法"></a>递归优化-记忆法</h3><p>上述代码存在很多重复的计算，例如求 $f(5)$ 递归分解过程</p><p><img src="http://cdn.ohheng.cn/202406121543230.png" alt="image-20221207092417933"></p><p>可以看到（颜色相同的是重复的）：</p><ul><li>$f(3)$ 重复了 2 次</li><li>$f(2)$ 重复了 3 次</li><li>$f(1)$ 重复了 5 次</li><li>$f(0)$ 重复了 3 次</li></ul><p>随着  $n$ 的增大，重复次数非常可观，如何优化呢？</p><p><strong>Memoization</strong> 记忆法（也称备忘录）是一种优化技术，通过存储函数调用结果（通常比较昂贵），当再次出现相同的输入（子问题）时，就能实现加速效果，改进后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;<br>    <span class="hljs-type">int</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>    Arrays.fill(cache, -<span class="hljs-number">1</span>);<br>    cache[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    cache[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    System.out.println(f(cache, n));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span>[] cache, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (cache[n] != -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> cache[n];<br>    &#125;<br><br>    cache[n] = f(cache, n - <span class="hljs-number">1</span>) + f(cache, n - <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> cache[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>优化后的图示，只要结果被缓存，就<strong>不会执行其子问题</strong></p><p><img src="http://cdn.ohheng.cn/202406121520594.png" alt="image-20221213173225807"></p><ul><li>改进后的时间复杂度为 $O(n)$</li><li>请自行验证改进后的效果</li><li>请自行分析改进后的空间复杂度</li></ul><blockquote><p><strong>注意</strong></p><ol><li>记忆法是动态规划的一种情况，强调的是自顶向下的解决</li><li>记忆法的本质是空间换时间</li></ol></blockquote><h3 id="递归优化-尾递归"><a href="#递归优化-尾递归" class="headerlink" title="递归优化-尾递归"></a>递归优化-尾递归</h3><p><strong>爆栈</strong></p><p>用递归做 $n + (n-1) + (n-2) … + 1$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n + sum(n - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在我的机器上  $n &#x3D; 12000$ 时，爆栈了</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coq">Exception <span class="hljs-built_in">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java.lang.StackOverflowError<br><span class="hljs-built_in">at</span> <span class="hljs-keyword">Test</span>.<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">Test</span>.java:<span class="hljs-number">10</span>)<br><span class="hljs-built_in">at</span> <span class="hljs-keyword">Test</span>.<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">Test</span>.java:<span class="hljs-number">10</span>)<br><span class="hljs-built_in">at</span> <span class="hljs-keyword">Test</span>.<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">Test</span>.java:<span class="hljs-number">10</span>)<br><span class="hljs-built_in">at</span> <span class="hljs-keyword">Test</span>.<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">Test</span>.java:<span class="hljs-number">10</span>)<br><span class="hljs-built_in">at</span> <span class="hljs-keyword">Test</span>.<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">Test</span>.java:<span class="hljs-number">10</span>)<br>...<br></code></pre></td></tr></table></figure><p>为什么呢？</p><ul><li>每次方法调用是需要消耗一定的栈内存的，这些内存用来存储方法参数、方法内局部变量、返回地址等等</li><li>方法调用占用的内存需要等到<strong>方法结束时</strong>才会释放</li><li>而递归调用我们之前讲过，不到最深不会回头，最内层方法没完成之前，外层方法都结束不了<ul><li>例如，$sum(3)$ 这个方法内有个需要执行 $3 + sum(2)$，$sum(2)$ 没返回前，加号前面的 $3$ 不能释放 </li><li>看下面伪码</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">long</span> n = <span class="hljs-number">3</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> + <span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">long</span> n = <span class="hljs-number">2</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> + <span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">long</span> n = <span class="hljs-number">1</span>)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>尾调用</strong></p><p>如果函数的最后一步是调用一个函数，那么称为尾调用，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">b</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>下面三段代码<strong>不能</strong>叫做尾调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> c = <span class="hljs-title function_">b</span>()<br>    <span class="hljs-keyword">return</span> c<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>因为最后一步并非调用函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">b</span>() + <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>最后一步执行的是加法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">b</span>() + x<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>最后一步执行的是加法</li></ul><p><strong>一些语言</strong>[^11]的编译器能够对尾调用做优化，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 做前面的事</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">b</span>() <br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 做前面的事</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">c</span>()<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span><br>&#125;<br><br><span class="hljs-title function_">a</span>()<br></code></pre></td></tr></table></figure><p>没优化之前的<strong>伪码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化后<strong>伪码</strong>如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">a</span>()<br><span class="hljs-title function_">b</span>()<br><span class="hljs-title function_">c</span>()<br></code></pre></td></tr></table></figure><p>为何尾递归才能优化？</p><p>调用 a 时</p><ul><li>a 返回时发现：没什么可留给 b 的，将来返回的结果 b 提供就可以了，用不着我 a 了，我的内存就可以释放</li></ul><p>调用 b 时</p><ul><li>b 返回时发现：没什么可留给 c 的，将来返回的结果 c 提供就可以了，用不着我 b 了，我的内存就可以释放</li></ul><p>如果调用 a 时</p><ul><li>不是尾调用，例如 return b() + 1，那么 a 就不能提前结束，因为它还得利用 b 的结果做加法</li></ul><p><strong>尾递归</strong></p><p>尾递归是尾调用的一种特例，也就是最后一步执行的是同一个函数</p><p><strong>尾递归避免爆栈</strong></p><p>安装 Scala</p><p><img src="http://cdn.ohheng.cn/202406121521837.png" alt="image-20221111122709227"></p><p>Scala 入门</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>    println(<span class="hljs-string">&quot;Hello Scala&quot;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Scala 是 java 的近亲，java 中的类都可以拿来重用</li><li>类型是放在变量后面的</li><li>Unit 表示无返回值，类似于 void</li><li>不需要以分号作为结尾，当然加上也对</li></ul><p>还是先写一个会爆栈的函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span></span>(n: <span class="hljs-type">Long</span>): <span class="hljs-type">Long</span> = &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> n + sum(n - <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Scala 最后一行代码若作为返回值，可以省略 return</li></ul><p>不出所料，在 $n &#x3D; 11000$ 时，还是出了异常</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala">println(sum(<span class="hljs-number">11000</span>))<br><br><span class="hljs-type">Exception</span> in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.<span class="hljs-type">StackOverflowError</span><br>at <span class="hljs-type">Main</span>$.sum(<span class="hljs-type">Main</span>.scala:<span class="hljs-number">25</span>)<br>at <span class="hljs-type">Main</span>$.sum(<span class="hljs-type">Main</span>.scala:<span class="hljs-number">25</span>)<br>at <span class="hljs-type">Main</span>$.sum(<span class="hljs-type">Main</span>.scala:<span class="hljs-number">25</span>)<br>at <span class="hljs-type">Main</span>$.sum(<span class="hljs-type">Main</span>.scala:<span class="hljs-number">25</span>)<br>...<br></code></pre></td></tr></table></figure><p>这是因为以上代码，还不是尾调用，要想成为尾调用，那么：</p><ol><li>最后一行代码，必须是一次函数调用</li><li>内层函数必须<strong>摆脱</strong>与外层函数的关系，内层函数<strong>执行后</strong>不依赖于外层的变量或常量</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span></span>(n: <span class="hljs-type">Long</span>): <span class="hljs-type">Long</span> = &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> n + sum(n - <span class="hljs-number">1</span>)  <span class="hljs-comment">// 依赖于外层函数的 n 变量</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如何让它执行后就摆脱对 n 的依赖呢？</p><ul><li>不能等递归回来再做加法，那样就必须保留外层的 n</li><li>把 n 当做内层函数的一个参数传进去，这时 n 就属于内层函数了</li><li>传参时就完成累加, 不必等回来时累加</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">sum</span>(<span class="hljs-built_in">n</span> - <span class="hljs-number">1</span>, <span class="hljs-built_in">n</span> + 累加器)<br></code></pre></td></tr></table></figure><p>改写后代码如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@tailrec</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span></span>(n: <span class="hljs-type">Long</span>, accumulator: <span class="hljs-type">Long</span>): <span class="hljs-type">Long</span> = &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + accumulator<br>    &#125; <br>    <span class="hljs-keyword">return</span> sum(n - <span class="hljs-number">1</span>, n + accumulator)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>accumulator 作为累加器</li><li>@tailrec 注解是 scala 提供的，用来检查方法是否符合尾递归</li><li>这回 sum(10000000, 0) 也没有问题，打印 50000005000000</li></ul><p>执行流程如下，以<strong>伪码</strong>表示 $sum(4, 0)$</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 首次调用</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span></span>(n = <span class="hljs-number">4</span>, accumulator = <span class="hljs-number">0</span>): <span class="hljs-type">Long</span> = &#123;<br>    <span class="hljs-keyword">return</span> sum(<span class="hljs-number">4</span> - <span class="hljs-number">1</span>, <span class="hljs-number">4</span> + accumulator)<br>&#125;<br><br><span class="hljs-comment">// 接下来调用内层 sum, 传参时就完成了累加, 不必等回来时累加，当内层 sum 调用后，外层 sum 空间没必要保留</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span></span>(n = <span class="hljs-number">3</span>, accumulator = <span class="hljs-number">4</span>): <span class="hljs-type">Long</span> = &#123;<br>    <span class="hljs-keyword">return</span> sum(<span class="hljs-number">3</span> - <span class="hljs-number">1</span>, <span class="hljs-number">3</span> + accumulator)<br>&#125;<br><br><span class="hljs-comment">// 继续调用内层 sum</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span></span>(n = <span class="hljs-number">2</span>, accumulator = <span class="hljs-number">7</span>): <span class="hljs-type">Long</span> = &#123;<br>    <span class="hljs-keyword">return</span> sum(<span class="hljs-number">2</span> - <span class="hljs-number">1</span>, <span class="hljs-number">2</span> + accumulator)<br>&#125;<br><br><span class="hljs-comment">// 继续调用内层 sum, 这是最后的 sum 调用完就返回最后结果 10, 前面所有其它 sum 的空间早已释放</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span></span>(n = <span class="hljs-number">1</span>, accumulator = <span class="hljs-number">9</span>): <span class="hljs-type">Long</span> = &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + accumulator<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本质上，尾递归优化是将函数的<strong>递归</strong>调用，变成了函数的<strong>循环</strong>调用</p><p><strong>改循环避免爆栈</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000000</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>        sum += i;<br>    &#125;<br>    System.out.println(sum);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归时间复杂度-Master-theorem-14"><a href="#递归时间复杂度-Master-theorem-14" class="headerlink" title="递归时间复杂度-Master theorem[^14]"></a>递归时间复杂度-Master theorem[^14]</h3><p>若有递归式<br>$$<br>T(n) &#x3D; aT(\frac{n}{b}) + f(n)<br>$$<br>其中 </p><ul><li>$T(n)$ 是问题的运行时间，$n$ 是数据规模</li><li>$a$ 是子问题个数</li><li>$T(\frac{n}{b})$ 是子问题运行时间，每个子问题被拆成原问题数据规模的 $\frac{n}{b}$</li><li>$f(n)$ 是除递归外执行的计算</li></ul><p>令 $x &#x3D; \log_{b}{a}$，即 $x &#x3D; \log_{子问题缩小倍数}{子问题个数}$</p><p>那么<br>$$<br>T(n) &#x3D;<br>\begin{cases}<br>\Theta(n^x) &amp; f(n) &#x3D; O(n^c) 并且 c \lt x\<br>\Theta(n^x\log{n}) &amp; f(n) &#x3D; \Theta(n^x)\<br>\Theta(n^c) &amp; f(n) &#x3D; \Omega(n^c) 并且 c \gt x<br>\end{cases}<br>$$</p><p><strong>例1</strong></p><p>$T(n) &#x3D; 2T(\frac{n}{2}) + n^4$ </p><ul><li>此时 $x &#x3D; 1 &lt; 4$，由后者决定整个时间复杂度 $\Theta(n^4)$</li><li>如果觉得对数不好算，可以换为求【$b$ 的几次方能等于 $a$】</li></ul><p><strong>例2</strong></p><p>$T(n) &#x3D; T(\frac{7n}{10}) + n$</p><ul><li>$a&#x3D;1, b&#x3D;\frac{10}{7}, x&#x3D;0, c&#x3D;1$</li><li>此时 $x &#x3D; 0 &lt; 1$，由后者决定整个时间复杂度 $\Theta(n)$</li></ul><p><strong>例3</strong></p><p>$T(n) &#x3D; 16T(\frac{n}{4}) + n^2$</p><ul><li>$a&#x3D;16, b&#x3D;4, x&#x3D;2, c&#x3D;2$</li><li>此时 $x&#x3D;2 &#x3D; c$，时间复杂度 $\Theta(n^2 \log{n})$</li></ul><p><strong>例4</strong></p><p>$T(n)&#x3D;7T(\frac{n}{3}) + n^2$</p><ul><li>$a&#x3D;7, b&#x3D;3, x&#x3D;1.?, c&#x3D;2$</li><li>此时 $x &#x3D; \log_{3}{7} &lt; 2$，由后者决定整个时间复杂度 $\Theta(n^2)$</li></ul><p><strong>例5</strong></p><p>$T(n) &#x3D; 7T(\frac{n}{2}) + n^2$</p><ul><li>$a&#x3D;7, b&#x3D;2, x&#x3D;2.?, c&#x3D;2$</li><li>此时 $x &#x3D; log_2{7} &gt; 2$，由前者决定整个时间复杂度 $\Theta(n^{\log_2{7}})$</li></ul><p><strong>例6</strong></p><p>$T(n) &#x3D; 2T(\frac{n}{4}) + \sqrt{n}$</p><ul><li>$a&#x3D;2, b&#x3D;4, x &#x3D; 0.5, c&#x3D;0.5$</li><li>此时 $x &#x3D; 0.5 &#x3D; c$，时间复杂度 $\Theta(\sqrt{n}\ \log{n})$</li></ul><p><strong>例7. 二分查找递归</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &gt; j) &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<br>        <span class="hljs-keyword">return</span> f(a, target, i, m - <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<br>        <span class="hljs-keyword">return</span> f(a, target, m + <span class="hljs-number">1</span>, j);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> m;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>子问题个数 $a &#x3D; 1$</li><li>子问题数据规模缩小倍数 $b &#x3D; 2$</li><li>除递归外执行的计算是常数级 $c&#x3D;0$</li></ul><p>$T(n) &#x3D; T(\frac{n}{2}) + n^0$</p><ul><li>此时 $x&#x3D;0 &#x3D; c$，时间复杂度 $\Theta(\log{n})$</li></ul><p><strong>例8. 归并排序递归</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">void split(B[], i, j, A[])<br>&#123;<br>    <span class="hljs-keyword">if</span> (j - i &lt;= <span class="hljs-number">1</span>)                    <br>        <span class="hljs-keyword">return</span>;                                <br>    m = (i + j) / <span class="hljs-number">2</span>;             <br>    <br>    // 递归<br>    split(A, i, m, B);  <br>    split(A, m, j, B); <br>    <br>    // 合并<br>    merge(B, i, m, j, A);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>子问题个数 $a&#x3D;2$</li><li>子问题数据规模缩小倍数 $b&#x3D;2$</li><li>除递归外，主要时间花在合并上，它可以用 $f(n) &#x3D; n$ 表示</li></ul><p>$T(n) &#x3D; 2T(\frac{n}{2}) + n$</p><ul><li>此时 $x&#x3D;1&#x3D;c$，时间复杂度 $\Theta(n\log{n})$</li></ul><p><strong>例9. 快速排序递归</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">algorithm quicksort(A, lo, hi) <span class="hljs-keyword">is</span> <br>  <span class="hljs-keyword">if</span> lo &gt;= hi || lo &lt; <span class="hljs-number">0</span> then <br>    <span class="hljs-keyword">return</span><br>  <br>  // 分区<br>  p := partition(A, lo, hi) <br>  <br>  // 递归<br>  quicksort(A, lo, p - <span class="hljs-number">1</span>) <br>  quicksort(A, p + <span class="hljs-number">1</span>, hi) <br></code></pre></td></tr></table></figure><ul><li>子问题个数 $a&#x3D;2$</li><li>子问题数据规模缩小倍数<ul><li>如果分区分的好，$b&#x3D;2$</li><li>如果分区没分好，例如分区1 的数据是 0，分区 2 的数据是 $n-1$</li></ul></li><li>除递归外，主要时间花在分区上，它可以用 $f(n) &#x3D; n$ 表示</li></ul><p>情况1 - 分区分的好</p><p>$T(n) &#x3D; 2T(\frac{n}{2}) + n$</p><ul><li>此时 $x&#x3D;1&#x3D;c$，时间复杂度 $\Theta(n\log{n})$</li></ul><p>情况2 - 分区没分好</p><p>$T(n) &#x3D; T(n-1) + T(1) + n$</p><ul><li>此时不能用主定理求解</li></ul><h3 id="递归时间复杂度-展开求解"><a href="#递归时间复杂度-展开求解" class="headerlink" title="递归时间复杂度-展开求解"></a>递归时间复杂度-展开求解</h3><p>像下面的递归式，都不能用主定理求解</p><p><strong>例1 - 递归求和</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n + sum(n - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>$T(n) &#x3D; T(n-1) + c$，$T(1) &#x3D; c$</p><p>下面为展开过程</p><p>$T(n) &#x3D; T(n-2) + c + c$</p><p>$T(n) &#x3D; T(n-3) + c + c + c$</p><p>…</p><p>$T(n) &#x3D; T(n-(n-1)) + (n-1)c$ </p><ul><li>其中 $T(n-(n-1))$ 即 $T(1)$</li><li>带入求得 $T(n) &#x3D; c + (n-1)c &#x3D; nc$</li></ul><p>时间复杂度为 $O(n)$</p><p><strong>例2 - 递归冒泡排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">bubble</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == high) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; high; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &gt; a[i + <span class="hljs-number">1</span>]) &#123;<br>            swap(a, i, i + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    bubble(a, high - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>$T(n) &#x3D; T(n-1) + n$，$T(1) &#x3D; c$</p><p>下面为展开过程</p><p>$T(n) &#x3D; T(n-2) + (n-1) + n$</p><p>$T(n) &#x3D; T(n-3) + (n-2) + (n-1) + n$</p><p>…</p><p>$T(n) &#x3D; T(1) + 2 + … + n &#x3D; T(1) + (n-1)\frac{2+n}{2} &#x3D; c + \frac{n^2}{2} + \frac{n}{2} -1$</p><p>时间复杂度 $O(n^2)$</p><blockquote><p>注：</p><ul><li>等差数列求和为 $个数*\frac{\vert首项-末项\vert}{2}$</li></ul></blockquote><p><strong>例3 - 递归快排</strong></p><p>快速排序分区没分好的极端情况</p><p>$T(n) &#x3D; T(n-1) + T(1) + n$，$T(1) &#x3D; c$</p><p>$T(n) &#x3D; T(n-1) + c + n$</p><p>下面为展开过程</p><p>$T(n) &#x3D; T(n-2) + c + (n-1) + c + n$</p><p>$T(n) &#x3D; T(n-3) + c + (n-2) + c + (n-1) + c + n$</p><p>…</p><p>$T(n) &#x3D; T(n-(n-1)) + (n-1)c + 2+…+n &#x3D; \frac{n^2}{2} + \frac{2cn+n}{2} -1$</p><p>时间复杂度 $O(n^2)$</p><p>不会推导的同学可以进入 <a href="https://www.wolframalpha.com/">https://www.wolframalpha.com/</a></p><ul><li>例1 输入 f(n) &#x3D; f(n - 1) + c, f(1) &#x3D; c</li><li>例2 输入 f(n) &#x3D; f(n - 1) + n, f(1) &#x3D; c</li><li>例3 输入 f(n) &#x3D; f(n - 1) + n + c, f(1) &#x3D; c</li></ul><h2 id="4-队列"><a href="#4-队列" class="headerlink" title="4. 队列"></a>4. 队列</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>计算机科学中，queue 是以顺序的方式维护的一组数据集合，在一端添加数据，从另一端移除数据。习惯来说，添加的一端称为<strong>尾</strong>，移除的一端称为<strong>头</strong>，就如同生活中的排队买商品</p><blockquote><p>In computer science, a <strong>queue</strong> is a collection of entities that are maintained in a sequence and can be modified by  the addition of entities at one end of the sequence and the removal of  entities from the other end of the sequence</p></blockquote><p>先定义一个简化的队列接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向队列尾插入值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 待插入值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 插入成功返回 true, 插入失败返回 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E value)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从对列头获取值, 并移除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果队列非空返回对头值, 否则返回 null</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从对列头获取值, 不移除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果队列非空返回对头值, 否则返回 null</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查队列是否为空</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 空返回 true, 否则返回 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查队列是否已满</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 满返回 true, 否则返回 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h3><p>下面以<strong>单向环形带哨兵</strong>链表方式来实现队列</p><p><img src="http://cdn.ohheng.cn/202406121521035.png" alt="image-20221230150105089"></p><p><img src="http://cdn.ohheng.cn/202406121701762.png" alt="image-20221230150141318"></p><p><img src="http://cdn.ohheng.cn/202406121522077.png" alt="image-20221230150153271"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListQueue</span>&lt;E&gt;<br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        E value;<br>        Node&lt;E&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E value, Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">private</span> Node&lt;E&gt; tail = head;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br><br>    &#123;<br>        tail.next = head;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedListQueue</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedListQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        Node&lt;E&gt; added = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(value, head);<br>        tail.next = added;<br>        tail = added;<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        Node&lt;E&gt; first = head.next;<br>        head.next = first.next;<br>        <span class="hljs-keyword">if</span> (first == tail) &#123;<br>            tail = head;<br>        &#125;<br>        size--;<br>        <span class="hljs-keyword">return</span> first.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head.next.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head == tail;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            Node&lt;E&gt; p = head.next;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != head;<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> p.value;<br>                p = p.next;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="环形数组实现"><a href="#环形数组实现" class="headerlink" title="环形数组实现"></a>环形数组实现</h3><p><strong>好处</strong></p><ol><li>对比普通数组，起点和终点更为自由，不用考虑数据移动</li><li>“环”意味着不会存在【越界】问题</li><li>数组性能更佳</li><li>环形数组比较适合实现有界队列、RingBuffer 等</li></ol><p><img src="http://cdn.ohheng.cn/202406121522751.png" alt="image-20221228175413998"></p><p><strong>下标计算</strong></p><p>例如，数组长度是 5，当前位置是 3 ，向前走 2 步，此时下标为 $(3 + 2)%5 &#x3D; 0$</p><p><img src="http://cdn.ohheng.cn/202406121522985.png" alt="image-20221228180357257"></p><p>$$<br>(cur + step) % length<br>$$</p><ul><li>cur 当前指针位置</li><li>step 前进步数</li><li>length 数组长度</li></ul><blockquote><p>注意：</p><ul><li>如果 step &#x3D; 1，也就是一次走一步，可以在 &gt;&#x3D; length 时重置为 0 即可</li></ul></blockquote><p><strong>判断空</strong></p><p><img src="http://cdn.ohheng.cn/202406121522588.png" alt="image-20221231081009018"></p><p><strong>判断满</strong></p><p><img src="http://cdn.ohheng.cn/202406121522073.png" alt="image-20221231080909475"></p><p>满之后的策略可以根据业务需求决定</p><ul><li>例如我们要实现的环形队列，满之后就拒绝入队</li></ul><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt;, Iterable&lt;E&gt;&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> E[] array;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> length;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        length = capacity + <span class="hljs-number">1</span>;<br>        array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[length];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        array[tail] = value;<br>        tail = (tail + <span class="hljs-number">1</span>) % length;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> array[head];<br>        head = (head + <span class="hljs-number">1</span>) % length;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array[head];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> tail == head;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (tail + <span class="hljs-number">1</span>) % length == head;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != tail;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> array[p];<br>                p = (p + <span class="hljs-number">1</span>) % array.length;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>判断空、满方法2</strong></p><p>引入 size </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue2</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> E[] array;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue2</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>        array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        array[tail] = value;<br>        tail = (tail + <span class="hljs-number">1</span>) % capacity;<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> array[head];<br>        head = (head + <span class="hljs-number">1</span>) % capacity;<br>        size--;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array[head];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != tail;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> array[p];<br>                p = (p + <span class="hljs-number">1</span>) % capacity;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>判断空、满方法3</strong></p><ul><li><p>head 和 tail 不断递增，用到索引时，再用它们进行计算，两个问题</p><ul><li><p>如何保证 head 和 tail 自增超过正整数最大值的正确性</p></li><li><p>如何让取模运算性能更高</p></li></ul></li><li><p>答案：让 capacity 为 2 的幂</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue3</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> E[] array;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> capacity;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue3</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-keyword">if</span> ((capacity &amp; capacity - <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;capacity 必须为 2 的幂&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>        array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-built_in">this</span>.capacity];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        array[tail &amp; capacity - <span class="hljs-number">1</span>] = value;<br>        tail++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> array[head &amp; capacity - <span class="hljs-number">1</span>];<br>        head++;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array[head &amp; capacity - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> tail - head == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> tail - head == capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != tail;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> array[p &amp; capacity - <span class="hljs-number">1</span>];<br>                p++;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-栈"><a href="#5-栈" class="headerlink" title="5. 栈"></a>5. 栈</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>计算机科学中，<strong>stack</strong> 是一种线性的数据结构，只能在其一端添加数据和移除数据。习惯来说，这一端称之为<strong>栈顶</strong>，另一端不能操作数据的称之为<strong>栈底</strong>，就如同生活中的一摞书</p><p>先提供一个栈接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Stack</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向栈顶压入元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 待压入值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 压入成功返回 true, 否则返回 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E value)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从栈顶弹出元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 栈非空返回栈顶元素, 栈为空返回 null</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回栈顶元素, 不弹出</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 栈非空返回栈顶元素, 栈为空返回 null</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断栈是否为空</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 空返回 true, 否则返回 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断栈是否已满</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 满返回 true, 否则返回 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表实现-1"><a href="#链表实现-1" class="headerlink" title="链表实现"></a>链表实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListStack</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Stack</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Node&lt;E&gt; head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedListStack</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        head.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(value, head.next);<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        Node&lt;E&gt; first = head.next;<br>        head.next = first.next;<br>        size--;<br>        <span class="hljs-keyword">return</span> first.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head.next.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head.next == <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            Node&lt;E&gt; p = head.next;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> p.value;<br>                p = p.next;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        E value;<br>        Node&lt;E&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E value, Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Stack</span>&lt;E&gt;, Iterable&lt;E&gt;&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> E[] array;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        array[top++] = value;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array[--top];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array[top-<span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> top == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> top == array.length;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> top;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p &gt; <span class="hljs-number">0</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> array[--p];<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>模拟如下方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;main1&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;main2&quot;</span>);<br>    method1();<br>    method2();<br>    System.out.println(<span class="hljs-string">&quot;main3&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;method1&quot;</span>);<br>    method3();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;method2&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method3</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;method3&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>模拟代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CPU</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Frame</span> &#123;<br>        <span class="hljs-type">int</span> exit;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Frame</span><span class="hljs-params">(<span class="hljs-type">int</span> exit)</span> &#123;<br>            <span class="hljs-built_in">this</span>.exit = exit;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 模拟程序计数器 Program counter</span><br>    <span class="hljs-keyword">static</span> ArrayStack&lt;Frame&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack</span>&lt;&gt;(<span class="hljs-number">100</span>); <span class="hljs-comment">// 模拟方法调用栈</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(-<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            <span class="hljs-keyword">switch</span> (pc) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; &#123;<br>                    System.out.println(<span class="hljs-string">&quot;main1&quot;</span>);<br>                    pc++;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> -&gt; &#123;<br>                    System.out.println(<span class="hljs-string">&quot;main2&quot;</span>);<br>                    pc++;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> -&gt; &#123;<br>                    stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(pc + <span class="hljs-number">1</span>));<br>                    pc = <span class="hljs-number">100</span>;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span> -&gt; &#123;<br>                    stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(pc + <span class="hljs-number">1</span>));<br>                    pc = <span class="hljs-number">200</span>;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span> -&gt; &#123;<br>                    System.out.println(<span class="hljs-string">&quot;main3&quot;</span>);<br>                    pc = stack.pop().exit;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">100</span> -&gt; &#123;<br>                    System.out.println(<span class="hljs-string">&quot;method1&quot;</span>);<br>                    stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(pc + <span class="hljs-number">1</span>));<br>                    pc = <span class="hljs-number">300</span>;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">101</span> -&gt; &#123;<br>                    pc = stack.pop().exit;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">200</span> -&gt; &#123;<br>                    System.out.println(<span class="hljs-string">&quot;method2&quot;</span>);<br>                    pc = stack.pop().exit;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">300</span> -&gt; &#123;<br>                    System.out.println(<span class="hljs-string">&quot;method3&quot;</span>);<br>                    pc = stack.pop().exit;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-双端队列"><a href="#6-双端队列" class="headerlink" title="6. 双端队列"></a>6. 双端队列</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p>双端队列、队列、栈对比</p><table><thead><tr><th></th><th>定义</th><th>特点</th></tr></thead><tbody><tr><td>队列</td><td>一端删除（头）另一端添加（尾）</td><td>First In First Out</td></tr><tr><td>栈</td><td>一端删除和添加（顶）</td><td>Last In First Out</td></tr><tr><td>双端队列</td><td>两端都可以删除、添加</td><td></td></tr><tr><td>优先级队列</td><td></td><td>优先级高者先出队</td></tr><tr><td>延时队列</td><td></td><td>根据延时时间确定优先级</td></tr><tr><td>并发非阻塞队列</td><td>队列空或满时不阻塞</td><td></td></tr><tr><td>并发阻塞队列</td><td>队列空时删除阻塞、队列满时添加阻塞</td><td></td></tr></tbody></table><blockquote><p>注1：</p><ul><li>Java 中 LinkedList 即为典型双端队列实现，不过它同时实现了 Queue 接口，也提供了栈的 push pop 等方法</li></ul><p>注2：</p><ul><li><p>不同语言，操作双端队列的方法命名有所不同，参见下表</p><table><thead><tr><th>操作</th><th>Java</th><th>JavaScript</th><th>C++</th><th>leetCode 641</th></tr></thead><tbody><tr><td>尾部插入</td><td>offerLast</td><td>push</td><td>push_back</td><td>insertLast</td></tr><tr><td>头部插入</td><td>offerFirst</td><td>unshift</td><td>push_front</td><td>insertFront</td></tr><tr><td>尾部移除</td><td>pollLast</td><td>pop</td><td>pop_back</td><td>deleteLast</td></tr><tr><td>头部移除</td><td>pollFirst</td><td>shift</td><td>pop_front</td><td>deleteFront</td></tr><tr><td>尾部获取</td><td>peekLast</td><td>at(-1)</td><td>back</td><td>getRear</td></tr><tr><td>头部获取</td><td>peekFirst</td><td>at(0)</td><td>front</td><td>getFront</td></tr></tbody></table></li><li><p>吐槽一下 leetCode 命名比较 low</p></li><li><p>常见的单词还有 enqueue 入队、dequeue 出队</p></li></ul></blockquote><p><strong>接口定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Deque</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerFirst</span><span class="hljs-params">(E e)</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerLast</span><span class="hljs-params">(E e)</span>;<br><br>    E <span class="hljs-title function_">pollFirst</span><span class="hljs-params">()</span>;<br><br>    E <span class="hljs-title function_">pollLast</span><span class="hljs-params">()</span>;<br><br>    E <span class="hljs-title function_">peekFirst</span><span class="hljs-params">()</span>;<br><br>    E <span class="hljs-title function_">peekLast</span><span class="hljs-params">()</span>;<br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表实现-2"><a href="#链表实现-2" class="headerlink" title="链表实现"></a>链表实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于环形链表的双端队列</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; 元素类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListDeque</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Deque</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerFirst</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        size++;<br>        Node&lt;E&gt; a = sentinel;<br>        Node&lt;E&gt; b = sentinel.next;<br>        Node&lt;E&gt; offered = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(a, e, b);<br>        a.next = offered;<br>        b.prev = offered;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerLast</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        size++;<br>        Node&lt;E&gt; a = sentinel.prev;<br>        Node&lt;E&gt; b = sentinel;<br>        Node&lt;E&gt; offered = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(a, e, b);<br>        a.next = offered;<br>        b.prev = offered;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        Node&lt;E&gt; a = sentinel;<br>        Node&lt;E&gt; polled = sentinel.next;<br>        Node&lt;E&gt; b = polled.next;<br>        a.next = b;<br>        b.prev = a;<br>        size--;<br>        <span class="hljs-keyword">return</span> polled.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        Node&lt;E&gt; polled = sentinel.prev;<br>        Node&lt;E&gt; a = polled.prev;<br>        Node&lt;E&gt; b = sentinel;<br>        a.next = b;<br>        b.prev = a;<br>        size--;<br>        <span class="hljs-keyword">return</span> polled.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sentinel.next.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sentinel.prev.value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == capacity;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            Node&lt;E&gt; p = sentinel.next;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != sentinel;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> p.value;<br>                p = p.next;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>        Node&lt;E&gt; prev;<br>        E value;<br>        Node&lt;E&gt; next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Node&lt;E&gt; prev, E value, Node&lt;E&gt; next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.prev = prev;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br>    &#125;<br><br>    Node&lt;E&gt; sentinel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedListDeque</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        sentinel.next = sentinel;<br>        sentinel.prev = sentinel;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组实现-1"><a href="#数组实现-1" class="headerlink" title="数组实现"></a>数组实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于循环数组实现, 特点</span><br><span class="hljs-comment"> * &lt;ul&gt;</span><br><span class="hljs-comment"> *     &lt;li&gt;tail 停下来的位置不存储, 会浪费一个位置&lt;/li&gt;</span><br><span class="hljs-comment"> * &lt;/ul&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayDeque1</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Deque</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    h</span><br><span class="hljs-comment">            t</span><br><span class="hljs-comment">        0   1   2   3</span><br><span class="hljs-comment">        b           a</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerFirst</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        head = dec(head, array.length);<br>        array[head] = e;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerLast</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        array[tail] = e;<br>        tail = inc(tail, array.length);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> array[head];<br>        array[head] = <span class="hljs-literal">null</span>;<br>        head = inc(head, array.length);<br>        <span class="hljs-keyword">return</span> e;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pollLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        tail = dec(tail, array.length);<br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> array[tail];<br>        array[tail] = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> e;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array[head];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peekLast</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array[dec(tail, array.length)];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head == tail;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (tail &gt; head) &#123;<br>            <span class="hljs-keyword">return</span> tail - head == array.length - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tail &lt; head) &#123;<br>            <span class="hljs-keyword">return</span> head - tail == <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt;() &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> p != tail;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> array[p];<br>                p = inc(p, array.length);<br>                <span class="hljs-keyword">return</span> e;<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    E[] array;<br>    <span class="hljs-type">int</span> head;<br>    <span class="hljs-type">int</span> tail;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayDeque1</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">inc</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &gt;= length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dec</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span> &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> length - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i - <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组实现中，如果存储的是基本类型，那么无需考虑内存释放，例如</p><p><img src="http://cdn.ohheng.cn/202406121523023.png" alt="image-20230110084245095"></p><p>但如果存储的是引用类型，应当设置该位置的引用为 null，以便内存及时释放</p><p><img src="http://cdn.ohheng.cn/202406121523769.png" alt="image-20230110084632543"></p><h2 id="7-优先级队列"><a href="#7-优先级队列" class="headerlink" title="7. 优先级队列"></a>7. 优先级队列</h2><h3 id="无序数组实现"><a href="#无序数组实现" class="headerlink" title="无序数组实现"></a>无序数组实现</h3><p><strong>要点</strong></p><ol><li>入队保持顺序</li><li>出队前找到优先级最高的出队，相当于一次选择排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue1</span>&lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Priority</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;<br><br>    Priority[] array;<br>    <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue1</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Priority</span>[capacity];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// O(1)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        array[size++] = e;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回优先级最高的索引值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">selectMax</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-keyword">if</span> (array[i].priority() &gt; array[max].priority()) &#123;<br>                max = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// O(n)</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> selectMax();<br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (E) array[max];<br>        remove(max);<br>        <span class="hljs-keyword">return</span> e;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; size - <span class="hljs-number">1</span>) &#123;<br>            System.arraycopy(array, index + <span class="hljs-number">1</span>,<br>                    array, index, size - <span class="hljs-number">1</span> - index);<br>        &#125;<br>        array[--size] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> selectMax();<br>        <span class="hljs-keyword">return</span> (E) array[max];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == array.length;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>视频中忘记了 help GC，注意一下</li></ul><h3 id="有序数组实现"><a href="#有序数组实现" class="headerlink" title="有序数组实现"></a>有序数组实现</h3><p><strong>要点</strong></p><ol><li>入队后排好序，优先级最高的排列在尾部</li><li>出队只需删除尾部元素即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue2</span>&lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Priority</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;<br><br>    Priority[] array;<br>    <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue2</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Priority</span>[capacity];<br>    &#125;<br><br>    <span class="hljs-comment">// O(n)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        insert(e);<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 一轮插入排序</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; array[i].priority() &gt; e.priority()) &#123;<br>            array[i + <span class="hljs-number">1</span>] = array[i];<br>            i--;<br>        &#125;<br>        array[i + <span class="hljs-number">1</span>] = e;<br>    &#125;<br><br>    <span class="hljs-comment">// O(1)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (E) array[size - <span class="hljs-number">1</span>];<br>        array[--size] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>        <span class="hljs-keyword">return</span> e;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (E) array[size - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == array.length;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆实现"><a href="#堆实现" class="headerlink" title="堆实现"></a>堆实现</h3><p>计算机科学中，堆是一种基于树的数据结构，通常用<strong>完全二叉树</strong>实现。堆的特性如下</p><ul><li>在大顶堆中，任意节点 C 与它的父节点 P 符合 $P.value \geq C.value$</li><li>而小顶堆中，任意节点 C 与它的父节点 P 符合 $P.value \leq C.value$</li><li>最顶层的节点（没有父亲）称之为 root 根节点</li></ul><blockquote><p>In computer science, a <strong>heap</strong> is a specialized tree-based data structure which is essentially an almost complete tree that satisfies the <strong>heap property</strong>: in a <em>max heap</em>, for any given node C, if P is a parent node of C, then the <em>key</em> (the <em>value</em>) of P is greater than or equal to the key of C. In a <em>min heap</em>, the key of P is less than or equal to the key of C. The node at the “top” of the heap (with no parents) is called the <strong>root</strong> node</p></blockquote><p>例1 - 满二叉树（Full Binary Tree）特点：每一层都是填满的</p><p><img src="http://cdn.ohheng.cn/202406121523533.png" alt="image-20230112171444699"></p><p>例2 - 完全二叉树（Complete Binary Tree）特点：最后一层可能未填满，靠左对齐</p><p><img src="http://cdn.ohheng.cn/202406121524568.png" alt="image-20230112171917135"></p><p>例3 - 大顶堆</p><p><img src="http://cdn.ohheng.cn/202406121524241.png" alt="image-20230112170242265"></p><p>例4 - 小顶堆</p><p><img src="http://cdn.ohheng.cn/202406121524669.png" alt="image-20230112171236067"></p><p>完全二叉树可以使用数组来表示</p><p><img src="http://cdn.ohheng.cn/202406121524290.png" alt="image-20230112174351649"></p><p>特征</p><ul><li>如果从索引 0 开始存储节点数据<ul><li>节点 $i$ 的父节点为 $floor((i-1)&#x2F;2)$，当 $i&gt;0$ 时</li><li>节点 $i$ 的左子节点为 $2i+1$，右子节点为 $2i+2$，当然它们得 $&lt; size$</li></ul></li><li>如果从索引 1 开始存储节点数据<ul><li>节点 $i$ 的父节点为 $floor(i&#x2F;2)$，当 $i &gt; 1$ 时</li><li>节点 $i$ 的左子节点为 $2i$，右子节点为 $2i+1$，同样得 $&lt; size$</li></ul></li></ul><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue4</span>&lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Priority</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;<br><br>    Priority[] array;<br>    <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue4</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Priority</span>[capacity];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E offered)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> size++;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (child &gt; <span class="hljs-number">0</span> &amp;&amp; offered.priority() &gt; array[parent].priority()) &#123;<br>            array[child] = array[parent];<br>            child = parent;<br>            parent = (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        &#125;<br>        array[child] = offered;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">Priority</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> array[i];<br>        array[i] = array[j];<br>        array[j] = t;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        swap(<span class="hljs-number">0</span>, size - <span class="hljs-number">1</span>);<br>        size--;<br>        <span class="hljs-type">Priority</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> array[size];<br>        array[size] = <span class="hljs-literal">null</span>;<br>        <br>        shiftDown(<span class="hljs-number">0</span>);        <br>        <span class="hljs-keyword">return</span> (E) e;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shiftDown</span><span class="hljs-params">(<span class="hljs-type">int</span> parent)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * parent + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> left + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> parent;<br>        <span class="hljs-keyword">if</span> (left &lt; size &amp;&amp; array[left].priority() &gt; array[max].priority()) &#123;<br>            max = left;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp; array[right].priority() &gt; array[max].priority()) &#123;<br>            max = right;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (max != parent) &#123;<br>            swap(max, parent);<br>            shiftDown(max);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (E) array[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == array.length;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-阻塞队列"><a href="#8-阻塞队列" class="headerlink" title="8. 阻塞队列"></a>8. 阻塞队列</h2><p>之前的队列在很多场景下都不能很好地工作，例如</p><ol><li>大部分场景要求分离向队列放入（生产者）、从队列拿出（消费者）两个角色、它们得由不同的线程来担当，而之前的实现根本没有考虑线程安全问题</li><li>队列为空，那么在之前的实现里会返回 null，如果就是硬要拿到一个元素呢？只能不断循环尝试</li><li>队列为满，那么再之前的实现里会返回 false，如果就是硬要塞入一个元素呢？只能不断循环尝试</li></ol><p>因此我们需要解决的问题有</p><ol><li>用锁保证线程安全</li><li>用条件变量让<strong>等待非空线程</strong>与<strong>等待不满线程</strong>进入<strong>等待</strong>状态，而不是不断循环尝试，让 CPU 空转</li></ol><p>有同学对线程安全还没有足够的认识，下面举一个反例，两个线程都要执行入队操作（几乎在同一时刻）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThreadUnsafe</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(String e)</span> &#123;<br>        array[tail] = e;<br>        tail++;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Arrays.toString(array);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TestThreadUnsafe</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThreadUnsafe</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt; queue.offer(<span class="hljs-string">&quot;e1&quot;</span>), <span class="hljs-string">&quot;t1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt; queue.offer(<span class="hljs-string">&quot;e2&quot;</span>), <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行的时间序列如下，假设初始状态 tail &#x3D; 0，在执行过程中由于 CPU 在两个线程之间切换，造成了指令交错</p><table><thead><tr><th>线程1</th><th>线程2</th><th>说明</th></tr></thead><tbody><tr><td>array[tail]&#x3D;e1</td><td></td><td>线程1 向 tail 位置加入 e1 这个元素，但还没来得及执行  tail++</td></tr><tr><td></td><td>array[tail]&#x3D;e2</td><td>线程2 向 tail 位置加入 e2 这个元素，覆盖掉了 e1</td></tr><tr><td></td><td>tail++</td><td>tail 自增为1</td></tr><tr><td>tail++</td><td></td><td>tail 自增为2</td></tr><tr><td></td><td></td><td>最后状态 tail 为 2，数组为 [e2, null, null …]</td></tr></tbody></table><p>糟糕的是，由于指令交错的顺序不同，得到的结果不止以上一种，宏观上造成混乱的效果</p><h3 id="单锁实现"><a href="#单锁实现" class="headerlink" title="单锁实现"></a>单锁实现</h3><p>Java 中要防止代码段交错执行，需要使用锁，有两种选择</p><ul><li>synchronized 代码块，属于关键字级别提供锁保护，功能少</li><li>ReentrantLock 类，功能丰富</li></ul><p>以 ReentrantLock 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(String e)</span> &#123;<br>    lock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        array[tail] = e;<br>        tail++;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只要两个线程执行上段代码时，锁对象是同一个，就能保证 try 块内的代码的执行不会出现指令交错现象，即执行顺序只可能是下面两种情况之一</p><table><thead><tr><th>线程1</th><th>线程2</th><th>说明</th></tr></thead><tbody><tr><td>lock.lockInterruptibly()</td><td></td><td>t1对锁对象上锁</td></tr><tr><td>array[tail]&#x3D;e1</td><td></td><td></td></tr><tr><td></td><td>lock.lockInterruptibly()</td><td>即使 CPU 切换到线程2，但由于t1已经对该对象上锁，因此线程2卡在这儿进不去</td></tr><tr><td>tail++</td><td></td><td>切换回线程1 执行后续代码</td></tr><tr><td>lock.unlock()</td><td></td><td>线程1 解锁</td></tr><tr><td></td><td>array[tail]&#x3D;e2</td><td>线程2 此时才能获得锁，执行它的代码</td></tr><tr><td></td><td>tail++</td><td></td></tr></tbody></table><ul><li>另一种情况是线程2 先获得锁，线程1 被挡在外面</li><li>要明白<strong>保护的本质</strong>，本例中是保护的是 tail 位置读写的安全</li></ul><p>事情还没有完，上面的例子是队列还没有放满的情况，考虑下面的代码（这回锁同时保护了 tail 和 size 的读写安全）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(String e)</span> &#123;<br>    lock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span>(isFull()) &#123;<br>            <span class="hljs-comment">// 满了怎么办?</span><br>        &#125;<br>        array[tail] = e;<br>        tail++;<br>        <br>        size++;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> size == array.length;<br>&#125;<br></code></pre></td></tr></table></figure><p>之前是返回 false 表示添加失败，前面分析过想达到这么一种效果：</p><ul><li>在队列满时，不是立刻返回，而是当前线程进入等待</li><li>什么时候队列不满了，再唤醒这个等待的线程，从上次的代码处继续向下运行</li></ul><p>ReentrantLock 可以配合条件变量来实现，代码进化为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-type">Condition</span> <span class="hljs-variable">tailWaits</span> <span class="hljs-operator">=</span> lock.newCondition(); <span class="hljs-comment">// 条件变量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(String e)</span> &#123;<br>    lock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (isFull()) &#123;<br>            tailWaits.await();<span class="hljs-comment">// 当队列满时, 当前线程进入 tailWaits 等待</span><br>        &#125;<br>        array[tail] = e;<br>        tail++;<br>        <br>        size++;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> size == array.length;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>条件变量底层也是个队列，用来存储这些需要等待的线程，当队列满了，就会将 offer 线程加入条件队列，并暂时释放锁</li><li>将来我们的队列如果不满了（由 poll 线程那边得知）可以调用 tailWaits.signal() 来唤醒 tailWaits 中首个等待的线程，被唤醒的线程会再次抢到锁，从上次 await 处继续向下运行</li></ul><p>思考为何要用 while 而不是 if，设队列容量是 3</p><table><thead><tr><th>操作前</th><th>offer(4)</th><th>offer(5)</th><th>poll()</th><th>操作后</th></tr></thead><tbody><tr><td>[1 2 3]</td><td>队列满，进入tailWaits 等待</td><td></td><td></td><td>[1 2 3]</td></tr><tr><td>[1 2 3]</td><td></td><td></td><td>取走 1，队列不满，唤醒线程</td><td>[2 3]</td></tr><tr><td>[2 3]</td><td></td><td>抢先获得锁，发现不满，放入 5</td><td></td><td>[2 3 5]</td></tr><tr><td>[2 3 5]</td><td>从上次等待处直接向下执行</td><td></td><td></td><td>[2 3 5 ?]</td></tr></tbody></table><p>关键点：</p><ul><li>从 tailWaits 中唤醒的线程，会与新来的 offer 的线程争抢锁，谁能抢到是不一定的，如果后者先抢到，就会导致条件又发生变化</li><li>这种情况称之为<strong>虚假唤醒</strong>，唤醒后应该重新检查条件，看是不是得重新进入等待</li></ul><p>最后的实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单锁实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt; 元素类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingQueue1</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockingQueue</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> E[] array;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 元素个数</span><br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockingQueue1</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];<br>    &#125;<br><br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">tailWaits</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">headWaits</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lock.lockInterruptibly();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (isFull()) &#123;<br>                tailWaits.await();<br>            &#125;<br>            array[tail] = e;<br>            <span class="hljs-keyword">if</span> (++tail == array.length) &#123;<br>                tail = <span class="hljs-number">0</span>;<br>            &#125;<br>            size++;<br>            headWaits.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e, <span class="hljs-type">long</span> timeout)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lock.lockInterruptibly();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> TimeUnit.MILLISECONDS.toNanos(timeout);<br>            <span class="hljs-keyword">while</span> (isFull()) &#123;<br>                <span class="hljs-keyword">if</span> (t &lt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                t = tailWaits.awaitNanos(t);<br>            &#125;<br>            array[tail] = e;<br>            <span class="hljs-keyword">if</span> (++tail == array.length) &#123;<br>                tail = <span class="hljs-number">0</span>;<br>            &#125;<br>            size++;<br>            headWaits.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lock.lockInterruptibly();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (isEmpty()) &#123;<br>                headWaits.await();<br>            &#125;<br>            <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> array[head];<br>            array[head] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>            <span class="hljs-keyword">if</span> (++head == array.length) &#123;<br>                head = <span class="hljs-number">0</span>;<br>            &#125;<br>            size--;<br>            tailWaits.signal();<br>            <span class="hljs-keyword">return</span> e;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == array.length;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>public void offer(E e, long timeout) throws InterruptedException 是带超时的版本，可以只等待一段时间，而不是永久等下去，类似的 poll 也可以做带超时的版本，这个留给大家了</li></ul><blockquote><p><strong>注意</strong></p><ul><li>JDK 中 BlockingQueue 接口的方法命名与我的示例有些差异<ul><li>方法 offer(E e) 是非阻塞的实现，阻塞实现方法为 put(E e)</li><li>方法 poll() 是非阻塞的实现，阻塞实现方法为 take()</li></ul></li></ul></blockquote><h3 id="双锁实现"><a href="#双锁实现" class="headerlink" title="双锁实现"></a>双锁实现</h3><p>单锁的缺点在于：</p><ul><li>生产和消费几乎是不冲突的，唯一冲突的是生产者和消费者它们有可能同时修改 size</li><li>冲突的主要是生产者之间：多个 offer 线程修改 tail</li><li>冲突的还有消费者之间：多个 poll 线程修改 head</li></ul><p>如果希望进一步提高性能，可以用两把锁</p><ul><li>一把锁保护 tail</li><li>另一把锁保护 head</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">headLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();  <span class="hljs-comment">// 保护 head 的锁</span><br><span class="hljs-type">Condition</span> <span class="hljs-variable">headWaits</span> <span class="hljs-operator">=</span> headLock.newCondition(); <span class="hljs-comment">// 队列空时，需要等待的线程集合</span><br><br><span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">tailLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();  <span class="hljs-comment">// 保护 tail 的锁</span><br><span class="hljs-type">Condition</span> <span class="hljs-variable">tailWaits</span> <span class="hljs-operator">=</span> tailLock.newCondition(); <span class="hljs-comment">// 队列满时，需要等待的线程集合</span><br></code></pre></td></tr></table></figure><p>先看看 offer 方法的初步实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    tailLock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 队列满等待</span><br>        <span class="hljs-keyword">while</span> (isFull()) &#123;<br>            tailWaits.await();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 不满则入队</span><br>        array[tail] = e;<br>        <span class="hljs-keyword">if</span> (++tail == array.length) &#123;<br>            tail = <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 修改 size （有问题）</span><br>        size++;<br>        <br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        tailLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码的缺点是 size 并不受 tailLock 保护，tailLock 与 headLock 是两把不同的锁，并不能实现互斥的效果。因此，size 需要用下面的代码保证原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);   <span class="hljs-comment">// 保护 size 的原子变量</span><br><br>size.getAndIncrement(); <span class="hljs-comment">// 自增</span><br>size.getAndDecrement(); <span class="hljs-comment">// 自减</span><br></code></pre></td></tr></table></figure><p>代码修改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    tailLock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 队列满等待</span><br>        <span class="hljs-keyword">while</span> (isFull()) &#123;<br>            tailWaits.await();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 不满则入队</span><br>        array[tail] = e;<br>        <span class="hljs-keyword">if</span> (++tail == array.length) &#123;<br>            tail = <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 修改 size</span><br>        size.getAndIncrement();<br>        <br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        tailLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对称地，可以写出 poll 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    E e;<br>    headLock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 队列空等待</span><br>        <span class="hljs-keyword">while</span> (isEmpty()) &#123;<br>            headWaits.await();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 不空则出队</span><br>        e = array[head];<br>        <span class="hljs-keyword">if</span> (++head == array.length) &#123;<br>            head = <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 修改 size</span><br>        size.getAndDecrement();<br>        <br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        headLock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">return</span> e;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面来看一个难题，就是如何通知 headWaits 和 tailWaits 中等待的线程，比如 poll 方法拿走一个元素，通知 tailWaits：我拿走一个，不满了噢，你们可以放了，因此代码改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    E e;<br>    headLock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 队列空等待</span><br>        <span class="hljs-keyword">while</span> (isEmpty()) &#123;<br>            headWaits.await();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 不空则出队</span><br>        e = array[head];<br>        <span class="hljs-keyword">if</span> (++head == array.length) &#123;<br>            head = <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 修改 size</span><br>        size.getAndDecrement();<br>        <br>        <span class="hljs-comment">// 通知 tailWaits 不满（有问题）</span><br>        tailWaits.signal();<br>        <br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        headLock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">return</span> e;<br>&#125;<br></code></pre></td></tr></table></figure><p>问题在于要使用这些条件变量的 await()， signal() 等方法需要先获得与之关联的锁，上面的代码若直接运行会出现以下错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.IllegalMonitorStateException<br></code></pre></td></tr></table></figure><p>那有同学说，加上锁不就行了吗，于是写出了下面的代码</p><p><img src="http://cdn.ohheng.cn/202406121524506.png" alt="image-20230208160343493"></p><p>发现什么问题了？两把锁这么嵌套使用，非常容易出现死锁，如下所示</p><p><img src="http://cdn.ohheng.cn/202406121525106.png" alt="image-20230208160143386"></p><p>因此得避免嵌套，两段加锁的代码变成了下面平级的样子</p><p><img src="http://cdn.ohheng.cn/202406121525079.png" alt="image-20230208162857435"></p><p>性能还可以进一步提升</p><ol><li><p>代码调整后 offer 并没有同时获取 tailLock 和 headLock 两把锁，因此两次加锁之间会有<strong>空隙</strong>，这个空隙内可能有其它的 offer 线程添加了更多的元素，那么这些线程都要执行 signal()，通知 poll 线程队列非空吗？</p><ul><li>每次调用 signal() 都需要这些 offer 线程先获得 headLock 锁，成本较高，要想法减少 offer 线程获得 headLock 锁的次数</li><li>可以加一个条件：当 offer 增加前队列为空，即从 0 变化到不空，才由此 offer 线程来通知 headWaits，其它情况不归它管</li></ul></li><li><p>队列从 0 变化到不空，会唤醒一个等待的 poll 线程，这个线程被唤醒后，肯定能拿到 headLock 锁，因此它具备了唤醒 headWaits 上其它 poll 线程的先决条件。如果检查出此时有其它 offer 线程新增了元素（不空，但不是从0变化而来），那么不妨由此 poll 线程来唤醒其它 poll 线程</p></li></ol><p>这个技巧被称之为级联通知（cascading notifies），类似的原因</p><ol start="3"><li>在 poll 时队列从满变化到不满，才由此 poll 线程来唤醒一个等待的 offer 线程，目的也是为了减少 poll 线程对 tailLock 上锁次数，剩下等待的 offer 线程由这个 offer 线程间接唤醒</li></ol><p>最终的代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingQueue2</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockingQueue</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> E[] array;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">headLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">headWaits</span> <span class="hljs-operator">=</span> headLock.newCondition();<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">tailLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">tailWaits</span> <span class="hljs-operator">=</span> tailLock.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockingQueue2</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.array = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">int</span> c;<br>        tailLock.lockInterruptibly();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (isFull()) &#123;<br>                tailWaits.await();<br>            &#125;<br>            array[tail] = e;<br>            <span class="hljs-keyword">if</span> (++tail == array.length) &#123;<br>                tail = <span class="hljs-number">0</span>;<br>            &#125;            <br>            c = size.getAndIncrement();<br>            <span class="hljs-comment">// a. 队列不满, 但不是从满-&gt;不满, 由此offer线程唤醒其它offer线程</span><br>            <span class="hljs-keyword">if</span> (c + <span class="hljs-number">1</span> &lt; array.length) &#123;<br>                tailWaits.signal();<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            tailLock.unlock();<br>        &#125;<br>        <span class="hljs-comment">// b. 从0-&gt;不空, 由此offer线程唤醒等待的poll线程</span><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>            headLock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                headWaits.signal();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                headLock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        E e;<br>        <span class="hljs-type">int</span> c;<br>        headLock.lockInterruptibly();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (isEmpty()) &#123;<br>                headWaits.await(); <br>            &#125;<br>            e = array[head]; <br>            <span class="hljs-keyword">if</span> (++head == array.length) &#123;<br>                head = <span class="hljs-number">0</span>;<br>            &#125;<br>            c = size.getAndDecrement();<br>            <span class="hljs-comment">// b. 队列不空, 但不是从0变化到不空，由此poll线程通知其它poll线程</span><br>            <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">1</span>) &#123;<br>                headWaits.signal();<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            headLock.unlock();<br>        &#125;<br>        <span class="hljs-comment">// a. 从满-&gt;不满, 由此poll线程唤醒等待的offer线程</span><br>        <span class="hljs-keyword">if</span> (c == array.length) &#123;<br>            tailLock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                tailWaits.signal();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                tailLock.unlock();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> e;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size.get() == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size.get() == array.length;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>双锁实现的非常精巧，据说作者 Doug Lea 花了一年的时间才完善了此段代码</p><h2 id="9-堆"><a href="#9-堆" class="headerlink" title="9. 堆"></a>9. 堆</h2><p>以大顶堆为例，相对于之前的优先级队列，增加了堆化等方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MaxHeap</span> &#123;<br>    <span class="hljs-type">int</span>[] array;<br>    <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MaxHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[capacity];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取堆顶元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 堆顶元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> array[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除堆顶元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 堆顶元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">0</span>];<br>        swap(<span class="hljs-number">0</span>, size - <span class="hljs-number">1</span>);<br>        size--;<br>        down(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> top;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除指定索引处元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 被删除元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">deleted</span> <span class="hljs-operator">=</span> array[index];<br>        swap(index, size - <span class="hljs-number">1</span>);<br>        size--;<br>        down(index);<br>        <span class="hljs-keyword">return</span> deleted;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 替换堆顶元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> replaced 新元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replace</span><span class="hljs-params">(<span class="hljs-type">int</span> replaced)</span> &#123;<br>        array[<span class="hljs-number">0</span>] = replaced;<br>        down(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 堆的尾部添加元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> offered 新元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否添加成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(<span class="hljs-type">int</span> offered)</span> &#123;<br>        <span class="hljs-keyword">if</span> (size == array.length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        up(offered);<br>        size++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 将 offered 元素上浮: 直至 offered 小于父元素或到堆顶</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">up</span><span class="hljs-params">(<span class="hljs-type">int</span> offered)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> size;<br>        <span class="hljs-keyword">while</span> (child &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (offered &gt; array[parent]) &#123;<br>                array[child] = array[parent];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            child = parent;<br>        &#125;<br>        array[child] = offered;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MaxHeap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span> &#123;<br>        <span class="hljs-built_in">this</span>.array = array;<br>        <span class="hljs-built_in">this</span>.size = array.length;<br>        heapify();<br>    &#125;<br><br>    <span class="hljs-comment">// 建堆</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 如何找到最后这个非叶子节点  size / 2 - 1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            down(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 将 parent 索引处的元素下潜: 与两个孩子较大者交换, 直至没孩子或孩子没它大</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">down</span><span class="hljs-params">(<span class="hljs-type">int</span> parent)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> parent * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> left + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> parent;<br>        <span class="hljs-keyword">if</span> (left &lt; size &amp;&amp; array[left] &gt; array[max]) &#123;<br>            max = left;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp; array[right] &gt; array[max]) &#123;<br>            max = right;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (max != parent) &#123; <span class="hljs-comment">// 找到了更大的孩子</span><br>            swap(max, parent);<br>            down(max);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 交换两个索引处的元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> array[i];<br>        array[i] = array[j];<br>        array[j] = t;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-type">MaxHeap</span> <span class="hljs-variable">maxHeap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MaxHeap</span>(array);<br>        System.out.println(Arrays.toString(maxHeap.array));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>建堆</strong></p><p>Floyd 建堆算法作者（也是之前龟兔赛跑判环作者）：</p><p><img src="http://cdn.ohheng.cn/202406121525753.png" alt="image-20230213095110902"></p><ol><li>找到最后一个非叶子节点</li><li>从后向前，对每个节点执行下潜</li></ol><p>一些规律</p><ul><li>一棵满二叉树节点个数为 $2^h-1$，如下例中高度 $h&#x3D;3$ 节点数是 $2^3-1&#x3D;7$</li><li>非叶子节点范围为 $[0, size&#x2F;2-1]$</li></ul><p>算法时间复杂度分析</p><p><img src="http://cdn.ohheng.cn/202406121525113.png" alt="image-20230213114024607"></p><p>下面看交换次数的推导：设节点高度为 3</p><table><thead><tr><th></th><th>本层节点数</th><th>高度</th><th>下潜最多交换次数（高度-1）</th></tr></thead><tbody><tr><td>4567 这层</td><td>4</td><td>1</td><td>0</td></tr><tr><td>23这层</td><td>2</td><td>2</td><td>1</td></tr><tr><td>1这层</td><td>1</td><td>3</td><td>2</td></tr></tbody></table><p>每一层的交换次数为：$节点个数*此节点交换次数$，总的交换次数为<br>$$<br>\begin{aligned}<br>&amp; 4 * 0 + 2 * 1 + 1 * 2 \</p><p>&amp; \frac{8}{2}*0 + \frac{8}{4}*1 + \frac{8}{8}*2 \</p><p>&amp; \frac{8}{2^1}*0 + \frac{8}{2^2}*1 + \frac{8}{2^3}*2\</p><p>\end{aligned}<br>$$<br>即<br>$$<br>\sum_{i&#x3D;1}^{h}(\frac{2^h}{2^i}*(i-1))<br>$$<br>在 <a href="https://www.wolframalpha.com/">https://www.wolframalpha.com/</a> 输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Sum</span>[\(<span class="hljs-number">40</span>)Divide[Power[<span class="hljs-number">2</span>,x],Power[<span class="hljs-number">2</span>,i]]*\(<span class="hljs-number">40</span>)i-<span class="hljs-number">1</span>\(<span class="hljs-number">41</span>)\(<span class="hljs-number">41</span>),&#123;i,<span class="hljs-number">1</span>,x&#125;]<br></code></pre></td></tr></table></figure><p>推导出<br>$$<br>2^h -h -1<br>$$<br>其中 $2^h \approx n$，$h \approx \log_2{n}$，因此有时间复杂度 $O(n)$</p><h2 id="10-二叉树"><a href="#10-二叉树" class="headerlink" title="10. 二叉树"></a>10. 二叉树</h2><p>二叉树是这么一种树状结构：每个节点最多有两个孩子，左孩子和右孩子</p><p>重要的二叉树结构</p><ul><li>完全二叉树（complete binary tree）是一种二叉树结构，除最后一层以外，每一层都必须填满，填充时要遵从先左后右</li><li>平衡二叉树（balance binary tree）是一种二叉树结构，其中每个节点的左右子树高度相差不超过 1</li></ul><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>存储方式分为两种</p><ol><li>定义树节点与左、右孩子引用（TreeNode）</li><li>使用数组，前面讲堆时用过，若以 0 作为树的根，索引可以通过如下方式计算<ul><li>父 &#x3D; floor((子 - 1) &#x2F; 2)</li><li>左孩子 &#x3D; 父 * 2 + 1</li><li>右孩子 &#x3D; 父 * 2 + 2</li></ul></li></ol><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>遍历也分为两种</p><ol><li>广度优先遍历（Breadth-first order）：尽可能先访问距离根最近的节点，也称为层序遍历</li><li>深度优先遍历（Depth-first order）：对于二叉树，可以进一步分成三种（要深入到叶子节点）<ol><li>pre-order 前序遍历，对于每一棵子树，先访问该节点，然后是左子树，最后是右子树</li><li>in-order 中序遍历，对于每一棵子树，先访问左子树，然后是该节点，最后是右子树</li><li>post-order 后序遍历，对于每一棵子树，先访问左子树，然后是右子树，最后是该节点</li></ol></li></ol><h4 id="广度优先"><a href="#广度优先" class="headerlink" title="广度优先"></a>广度优先</h4><p><img src="http://cdn.ohheng.cn/202406121525013.png" alt="image-20230216153607396"></p><table><thead><tr><th>本轮开始时队列</th><th>本轮访问节点</th></tr></thead><tbody><tr><td>[1]</td><td>1</td></tr><tr><td>[2, 3]</td><td>2</td></tr><tr><td>[3, 4]</td><td>3</td></tr><tr><td>[4, 5, 6]</td><td>4</td></tr><tr><td>[5, 6]</td><td>5</td></tr><tr><td>[6, 7, 8]</td><td>6</td></tr><tr><td>[7, 8]</td><td>7</td></tr><tr><td>[8]</td><td>8</td></tr><tr><td>[]</td><td></td></tr></tbody></table><ol><li>初始化，将根节点加入队列</li><li>循环处理队列中每个节点，直至队列为空</li><li>每次循环内处理节点后，将它的孩子节点（即下一层的节点）加入队列</li></ol><blockquote><p>注意</p><ul><li><p>以上用队列来层序遍历是针对  TreeNode 这种方式表示的二叉树</p></li><li><p>对于数组表现的二叉树，则直接遍历数组即可，自然为层序遍历的顺序</p></li></ul></blockquote><h4 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h4><p><img src="http://cdn.ohheng.cn/202406121526597.png" alt="image-20230221110443230"></p><table><thead><tr><th>栈暂存</th><th>已处理</th><th>前序遍历</th><th>中序遍历</th></tr></thead><tbody><tr><td>[1]</td><td>1 ✔️ 左💤 右💤</td><td>1</td><td></td></tr><tr><td>[1, 2]</td><td>2✔️ 左💤 右💤<br />1✔️ 左💤 右💤</td><td>2</td><td></td></tr><tr><td>[1, 2, 4]</td><td>4✔️ 左✔️ 右✔️<br />2✔️ 左💤 右💤<br />1✔️ 左💤 右💤</td><td>4</td><td>4</td></tr><tr><td>[1, 2]</td><td>2✔️ 左✔️ 右✔️<br />1✔️ 左💤 右💤</td><td></td><td>2</td></tr><tr><td>[1]</td><td>1✔️ 左✔️ 右💤</td><td></td><td>1</td></tr><tr><td>[1, 3]</td><td>3✔️ 左💤 右💤<br />1✔️ 左✔️ 右💤</td><td>3</td><td></td></tr><tr><td>[1, 3, 5]</td><td>5✔️ 左✔️ 右✔️<br />3✔️ 左💤 右💤<br />1✔️ 左✔️ 右💤</td><td>5</td><td>5</td></tr><tr><td>[1, 3]</td><td>3✔️ 左✔️ 右💤<br />1✔️ 左✔️ 右💤</td><td></td><td>3</td></tr><tr><td>[1, 3, 6]</td><td>6✔️ 左✔️ 右✔️<br />3✔️ 左✔️ 右💤<br />1✔️ 左✔️ 右💤</td><td>6</td><td>6</td></tr><tr><td>[1, 3]</td><td>3✔️ 左✔️ 右✔️<br />1✔️ 左✔️ 右💤</td><td></td><td></td></tr><tr><td>[1]</td><td>1✔️ 左✔️ 右✔️</td><td></td><td></td></tr><tr><td>[]</td><td></td><td></td><td></td></tr></tbody></table><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;h3&gt;前序遍历&lt;/h3&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> node 节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.print(node.val + <span class="hljs-string">&quot;\t&quot;</span>); <span class="hljs-comment">// 值</span><br>    preOrder(node.left); <span class="hljs-comment">// 左</span><br>    preOrder(node.right); <span class="hljs-comment">// 右</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;h3&gt;中序遍历&lt;/h3&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> node 节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    inOrder(node.left); <span class="hljs-comment">// 左</span><br>    System.out.print(node.val + <span class="hljs-string">&quot;\t&quot;</span>); <span class="hljs-comment">// 值</span><br>    inOrder(node.right); <span class="hljs-comment">// 右</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;h3&gt;后序遍历&lt;/h3&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> node 节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    postOrder(node.left); <span class="hljs-comment">// 左</span><br>    postOrder(node.right); <span class="hljs-comment">// 右</span><br>    System.out.print(node.val + <span class="hljs-string">&quot;\t&quot;</span>); <span class="hljs-comment">// 值</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h4><p><strong>前序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedListStack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedListStack</span>&lt;&gt;();<br><span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root;<br><br><span class="hljs-keyword">while</span> (!stack.isEmpty() || curr != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(curr);<br>        System.out.println(curr);<br>        curr = curr.left;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">pop</span> <span class="hljs-operator">=</span> stack.pop();<br>        curr = pop.right;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>中序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedListStack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedListStack</span>&lt;&gt;();<br><span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root;<br><br><span class="hljs-keyword">while</span> (!stack.isEmpty() || curr != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(curr);<br>        curr = curr.left;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">pop</span> <span class="hljs-operator">=</span> stack.pop();<br>        System.out.println(pop);<br>        curr = pop.right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>后序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedListStack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedListStack</span>&lt;&gt;();<br><span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root;<br><span class="hljs-type">TreeNode</span> <span class="hljs-variable">pop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">while</span> (!stack.isEmpty() || curr != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(curr);<br>        curr = curr.left;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">peek</span> <span class="hljs-operator">=</span> stack.peek();<br>        <span class="hljs-keyword">if</span> (peek.right == <span class="hljs-literal">null</span> || peek.right == pop) &#123;<br>            pop = stack.pop();<br>            System.out.println(pop);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            curr = peek.right;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于后序遍历，向回走时，需要处理完右子树才能 pop 出栈。如何知道右子树处理完成呢？</p><ul><li><p>如果栈顶元素的 $right \equiv null$ 表示没啥可处理的，可以出栈</p></li><li><p>如果栈顶元素的 $right \neq null$，</p><ul><li>那么使用 lastPop 记录最近出栈的节点，即表示从这个节点向回走</li><li>如果栈顶元素的 $right&#x3D;&#x3D;lastPop$ 此时应当出栈</li></ul></li></ul><p>对于前、中两种遍历，实际以上代码从右子树向回走时，并未走完全程（stack 提前出栈了）后序遍历以上代码是走完全程了</p><p><strong>统一写法</strong></p><p>下面是一种统一的写法，依据后序遍历修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedList&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br><span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root; <span class="hljs-comment">// 代表当前节点</span><br><span class="hljs-type">TreeNode</span> <span class="hljs-variable">pop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 最近一次弹栈的元素</span><br><span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span> || !stack.isEmpty()) &#123;<br>    <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>        colorPrintln(<span class="hljs-string">&quot;前: &quot;</span> + curr.val, <span class="hljs-number">31</span>);<br>        stack.push(curr); <span class="hljs-comment">// 压入栈，为了记住回来的路</span><br>        curr = curr.left;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">peek</span> <span class="hljs-operator">=</span> stack.peek();<br>        <span class="hljs-comment">// 右子树可以不处理, 对中序来说, 要在右子树处理之前打印</span><br>        <span class="hljs-keyword">if</span> (peek.right == <span class="hljs-literal">null</span>) &#123;<br>            colorPrintln(<span class="hljs-string">&quot;中: &quot;</span> + peek.val, <span class="hljs-number">36</span>);<br>            pop = stack.pop();<br>            colorPrintln(<span class="hljs-string">&quot;后: &quot;</span> + pop.val, <span class="hljs-number">34</span>);<br>        &#125;<br>        <span class="hljs-comment">// 右子树处理完成, 对中序来说, 无需打印</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (peek.right == pop) &#123;<br>            pop = stack.pop();<br>            colorPrintln(<span class="hljs-string">&quot;后: &quot;</span> + pop.val, <span class="hljs-number">34</span>);<br>        &#125;<br>        <span class="hljs-comment">// 右子树待处理, 对中序来说, 要在右子树处理之前打印</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            colorPrintln(<span class="hljs-string">&quot;中: &quot;</span> + peek.val, <span class="hljs-number">36</span>);<br>            curr = peek.right;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">colorPrintln</span><span class="hljs-params">(String origin, <span class="hljs-type">int</span> color)</span> &#123;<br>    System.out.printf(<span class="hljs-string">&quot;\033[%dm%s\033[0m%n&quot;</span>, color, origin);<br>&#125;<br></code></pre></td></tr></table></figure><p>一张图演示三种遍历</p><p><img src="http://cdn.ohheng.cn/202406121526377.png" alt="Sorted_binary_tree_ALL_RGB.svg"></p><ul><li>红色：前序遍历顺序</li><li>绿色：中序遍历顺序</li><li>蓝色：后续遍历顺序</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识算法</title>
    <link href="/2024/06/12/(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95)%E5%88%9D%E8%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/2024/06/12/(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95)%E5%88%9D%E8%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一-初识算法"><a href="#一-初识算法" class="headerlink" title="一.初识算法"></a>一.初识算法</h1><h2 id="1-1-什么是算法？"><a href="#1-1-什么是算法？" class="headerlink" title="1.1 什么是算法？"></a>1.1 什么是算法？</h2><p><strong>定义</strong></p><p>在数学和计算机科学领域，算法是一系列有限的严谨指令，通常用于解决一类特定问题或执行计算</p><blockquote><p>In mathematics and computer science, an <strong>algorithm</strong> (&#x2F;ˈælɡərɪðəm&#x2F;) is a finite sequence of rigorous instructions, typically used to solve a class of specific problems or to perform a computation.[^1]</p></blockquote><p><strong>Introduction to Algorithm[^2]</strong></p><p>不正式的说，算法就是任何定义优良的计算过程：接收一些值作为输入，在有限的时间内，产生一些值作为输出。</p><blockquote><p>Informally, an algorithm is any well-defined computational procedure that takes some value, or set of values, as input and produces some value, or set of values, as output in a finite amount of time.</p></blockquote><h2 id="1-2-什么是数据结构？"><a href="#1-2-什么是数据结构？" class="headerlink" title="1.2 什么是数据结构？"></a>1.2 什么是数据结构？</h2><p><strong>定义</strong></p><p>在计算机科学领域，数据结构是一种数据组织、管理和存储格式，通常被选择用来高效访问数据</p><blockquote><p>In computer science, a <strong>data structure</strong> is a data organization, management, and storage format that is usually chosen for efficient access to data</p></blockquote><p><strong>Introduction to Algorithm[^2]</strong></p><p>数据结构是一种存储和组织数据的方式，旨在便于访问和修改</p><blockquote><p>A data structure is a way to store and organize data in order to facilitate access and modifications</p></blockquote><p>接下来我们通过对一个非常著名的二分查找算法的讲解来认识一下算法</p><h2 id="1-3-二分查找-3"><a href="#1-3-二分查找-3" class="headerlink" title="1.3 二分查找 [^3]"></a>1.3 二分查找 [^3]</h2><p>二分查找算法也称折半查找，是一种非常高效的工作于有序数组的查找算法。后续的课程中还会学习更多的查找算法，但在此之前，不妨用它作为入门。</p><h3 id="二分查找基础版"><a href="#二分查找基础版" class="headerlink" title="二分查找基础版"></a>二分查找基础版</h3><p>需求：在<strong>有序</strong>数组 $A$ 内，查找值 $target$</p><ul><li>如果找到返回索引</li><li>如果找不到返回 $-1$</li></ul><table><thead><tr><th>算法描述</th><th></th></tr></thead><tbody><tr><td>前提</td><td>给定一个内含 $n$ 个元素的有序数组 $A$，满足 $A_{0}\leq A_{1}\leq A_{2}\leq \cdots \leq A_{n-1}$，一个待查值 $target$</td></tr><tr><td>1</td><td>设置 $i&#x3D;0$，$j&#x3D;n-1$</td></tr><tr><td>2</td><td>如果 $i \gt j$，结束查找，没找到</td></tr><tr><td>3</td><td>设置 $m &#x3D; floor(\frac {i+j}{2})$ ，$m$ 为中间索引，$floor$ 是向下取整（$\leq \frac {i+j}{2}$ 的最小整数）</td></tr><tr><td>4</td><td>如果 $target &lt; A_{m}$ 设置 $j &#x3D; m - 1$，跳到第2步</td></tr><tr><td>5</td><td>如果 $A_{m} &lt; target$ 设置 $i &#x3D; m + 1$，跳到第2步</td></tr><tr><td>6</td><td>如果 $A_{m} &#x3D; target$，结束查找，找到了</td></tr></tbody></table><p>java 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<span class="hljs-comment">// 在左边</span><br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<span class="hljs-comment">// 在右边</span><br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>$i,j$ 对应着搜索区间 $[0,a.length-1]$（注意是闭合的区间），$i&lt;&#x3D;j$ 意味着搜索区间内还有未比较的元素，$i,j$ 指向的元素也可能是比较的目标<ul><li>思考：如果不加 $i&#x3D;&#x3D;j$ 行不行？</li><li>回答：不行，因为这意味着 $i,j$ 指向的元素会漏过比较</li></ul></li><li>$m$ 对应着中间位置，中间位置左边和右边的元素可能不相等（差一个），不会影响结果</li><li>如果某次未找到，那么缩小后的区间内不包含 $m$</li></ul><h3 id="二分查找改变版"><a href="#二分查找改变版" class="headerlink" title="二分查找改变版"></a>二分查找改变版</h3><p>另一种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<span class="hljs-comment">// 在左边</span><br>            j = m;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<span class="hljs-comment">// 在右边</span><br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>$i,j$ 对应着搜索区间 $[0,a.length)$（注意是左闭右开的区间），$i&lt;j$ 意味着搜索区间内还有未比较的元素，$j$ 指向的<strong>一定不是</strong>查找目标<ul><li>思考：为啥这次不加 $i&#x3D;&#x3D;j$ 的条件了？</li><li>回答：这回 $j$ 指向的不是查找目标，如果还加 $i&#x3D;&#x3D;j$ 条件，就意味着 $j$ 指向的还会再次比较，找不到时，会死循环</li></ul></li><li>如果某次要缩小右边界，那么 $j&#x3D;m$，因为此时的 $m$ 已经<strong>不是</strong>查找目标了</li></ul><h3 id="衡量算法好坏"><a href="#衡量算法好坏" class="headerlink" title="衡量算法好坏"></a>衡量算法好坏</h3><p><strong>时间复杂度</strong></p><p>下面的查找算法也能得出与之前二分查找一样的结果，那你能说出它差在哪里吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        i &lt; a.length;<br>        i++<br>    ) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] == k) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>考虑最坏情况下（没找到）例如 <code>[1,2,3,4]</code> 查找 5</p><ul><li><code>int i = 0</code> 只执行一次</li><li><code>i &lt; a.length</code> 受数组元素个数 $n$ 的影响，比较 $n+1$ 次</li><li><code>i++</code> 受数组元素个数 $n$ 的影响，自增 $n$ 次</li><li><code>a[i] == k</code> 受元素个数 $n$ 的影响，比较 $n$ 次</li><li><code>return -1</code>，执行一次</li></ul><p>粗略认为每行代码执行时间是 $t$，假设 $n&#x3D;4$ 那么</p><ul><li>总执行时间是 $(1+4+1+4+4+1)*t &#x3D; 15t$</li><li>可以推导出更一般地公式为，$T &#x3D; (3*n+3)t$</li></ul><p>如果套用二分查找算法，还是 <code>[1,2,3,4]</code> 查找 5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<span class="hljs-comment">// 在左边</span><br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<span class="hljs-comment">// 在右边</span><br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>int i = 0, j = a.length - 1</code> 各执行 1 次</p></li><li><p><code>i &lt;= j</code> 比较 $floor(\log_{2}(n)+1)$ 再加 1 次</p></li><li><p><code>(i + j) &gt;&gt;&gt; 1</code> 计算 $floor(\log_{2}(n)+1)$ 次</p></li><li><p>接下来 <code>if() else if() else</code> 会执行 $3* floor(\log_{2}(n)+1)$ 次，分别为</p><ul><li>if 比较</li><li>else if 比较</li><li>else if 比较成立后的赋值语句</li></ul></li><li><p><code>return -1</code>，执行一次</p></li></ul><p>结果：</p><ul><li>总执行时间为 $(2 + (1+3) + 3 + 3 * 3 +1)*t &#x3D; 19t$</li><li>更一般地公式为 $(4 + 5 * floor(\log_{2}(n)+1))*t$</li></ul><blockquote><p><strong>注意：</strong></p><p>左侧未找到和右侧未找到结果不一样，这里不做分析</p></blockquote><p>两个算法比较，可以看到 $n$ 在较小的时候，二者花费的次数差不多</p><img src="http://cdn.ohheng.cn/202406120943187.png" alt="image-20221108095747933" style="zoom:50%;" /><p>但随着 $n$ 越来越大，比如说 $n&#x3D;1000$ 时，用二分查找算法（红色）也就是 $54t$，而蓝色算法则需要 $3003t$</p><img src="http://cdn.ohheng.cn/202406120943640.png" alt="image-20221108100014451" style="zoom:50%;" /><blockquote><p>画图采用的是 <a href="https://www.desmos.com/calculator?lang=zh-CN">Desmos | 图形计算器</a></p></blockquote><p>计算机科学中，<strong>时间复杂度</strong>是用来衡量：一个算法的执行，随数据规模增大，而增长的时间成本</p><ul><li>不依赖于环境因素</li></ul><p>如何表示时间复杂度呢？</p><ul><li><p>假设算法要处理的数据规模是 $n$，代码总的执行行数用函数 $f(n)$ 来表示，例如：</p><ul><li>线性查找算法的函数 $f(n) &#x3D; 3*n + 3$</li><li>二分查找算法的函数 $f(n) &#x3D; (floor(log_2(n)) + 1) * 5 + 4$</li></ul></li><li><p>为了对 $f(n)$ 进行化简，应当抓住主要矛盾，找到一个变化趋势与之相近的表示法</p></li></ul><p><strong>大 $O$ 表示法[^4]</strong></p><img src="http://cdn.ohheng.cn/202406120943939.png"/><p>其中</p><ul><li>$c, c_1, c_2$ 都为一个常数</li><li>$f(n)$ 是实际执行代码行数与 n 的函数</li><li>$g(n)$ 是经过化简，变化趋势与 $f(n)$ 一致的 n 的函数</li></ul><p><strong>渐进上界</strong></p><p>渐进上界（asymptotic upper bound）：从某个常数 $n_0$开始，$c*g(n)$ 总是位于 $f(n)$ 上方，那么记作 $O(g(n))$</p><ul><li>代表算法执行的最差情况</li></ul><p>例1</p><ul><li>$f(n) &#x3D; 3*n+3$ </li><li>$g(n) &#x3D; n$</li><li>取 $c&#x3D;4$，在$n_0&#x3D;3$ 之后，$g(n)$ 可以作为 $f(n)$ 的渐进上界，因此表示法写作 $O(n)$</li></ul><p>例2</p><ul><li>$f(n) &#x3D; 5*floor(log_2(n)) + 9$</li><li>$g(n) &#x3D; log_2(n)$</li><li>$O(log_2(n))$</li></ul><p>已知 $f(n)$ 来说，求 $g(n)$</p><ul><li>表达式中相乘的常量，可以省略，如<ul><li>$f(n) &#x3D; 100*n^2$ 中的 $100$</li></ul></li><li>多项式中数量规模更小（低次项）的表达式，如<ul><li>$f(n)&#x3D;n^2+n$ 中的 $n$</li><li>$f(n) &#x3D; n^3 + n^2$ 中的 $n^2$</li></ul></li><li>不同底数的对数，渐进上界可以用一个对数函数 $\log n$ 表示<ul><li>例如：$log_2(n)$ 可以替换为 $log_{10}(n)$，因为 $log_2(n) &#x3D; \frac{log_{10}(n)}{log_{10}(2)}$，相乘的常量 $\frac{1}{log_{10}(2)}$ 可以省略</li></ul></li><li>类似的，对数的常数次幂可省略<ul><li>如：$log(n^c) &#x3D; c * log(n)$</li></ul></li></ul><p><strong>常见大 $O$ 表示法</strong></p><img src="http://cdn.ohheng.cn/202406120943799.png"/><p> 按时间复杂度从低到高</p><ul><li>黑色横线 $O(1)$，常量时间，意味着算法时间并不随数据规模而变化</li><li>绿色 $O(log(n))$，对数时间</li><li>蓝色 $O(n)$，线性时间，算法时间与数据规模成正比</li><li>橙色 $O(n*log(n))$，拟线性时间</li><li>红色 $O(n^2)$ 平方时间</li><li>黑色朝上 $O(2^n)$ 指数时间</li><li>没画出来的 $O(n!)$</li></ul><p><strong>渐进下界</strong></p><p>渐进下界（asymptotic lower bound）：从某个常数 $n_0$开始，$c*g(n)$ 总是位于 $f(n)$ 下方，那么记作 $\Omega(g(n))$</p><p><strong>渐进紧界</strong></p><p>渐进紧界（asymptotic tight bounds）：从某个常数 $n_0$开始，$f(n)$ 总是在 $c_1<em>g(n)$ 和 $c_2</em>g(n)$ 之间，那么记作 $\Theta(g(n))$</p><p><strong>空间复杂度</strong></p><p>与时间复杂度类似，一般也使用大 $O$ 表示法来衡量：一个算法执行随数据规模增大，而增长的<strong>额外</strong>空间成本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchBasic</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;    <span class="hljs-comment">// 设置指针和初值</span><br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;                <span class="hljs-comment">// i~j 范围内有东西</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(target &lt; a[m]) &#123;         <span class="hljs-comment">// 目标在左边</span><br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123; <span class="hljs-comment">// 目标在右边</span><br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-comment">// 找到了</span><br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>二分查找性能</strong></p><p>下面分析二分查找算法的性能</p><p>时间复杂度</p><ul><li>最坏情况：$O(\log n)$</li><li>最好情况：如果待查找元素恰好在数组中央，只需要循环一次 $O(1)$</li></ul><p>空间复杂度</p><ul><li>需要常数个指针 $i,j,m$，因此额外占用的空间是 $O(1)$</li></ul><h3 id="二分查找平衡版"><a href="#二分查找平衡版" class="headerlink" title="二分查找平衡版"></a>二分查找平衡版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchBalance</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span> &lt; j - i) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<br>            j = m;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (a[i] == target) ? i : -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>思想：</p><ol><li>左闭右开的区间，$i$ 指向的可能是目标，而 $j$ 指向的不是目标</li><li>不奢望循环内通过 $m$ 找出目标, 缩小区间直至剩 1 个, 剩下的这个可能就是要找的（通过 $i$）<ul><li>$j - i &gt; 1$ 的含义是，在范围内待比较的元素个数 &gt; 1</li></ul></li><li>改变 $i$ 边界时，它指向的可能是目标，因此不能 $m+1$</li><li>循环内的平均比较次数减少了</li><li>时间复杂度 $\Theta(log(n))$</li></ol><h3 id="二分查找-Java-版"><a href="#二分查找-Java-版" class="headerlink" title="二分查找 Java 版"></a>二分查找 Java 版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch0</span><span class="hljs-params">(<span class="hljs-type">long</span>[] a, <span class="hljs-type">int</span> fromIndex, <span class="hljs-type">int</span> toIndex,</span><br><span class="hljs-params">                                     <span class="hljs-type">long</span> key)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> fromIndex;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">high</span> <span class="hljs-operator">=</span> toIndex - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (low + high) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">midVal</span> <span class="hljs-operator">=</span> a[mid];<br><br>        <span class="hljs-keyword">if</span> (midVal &lt; key)<br>            low = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (midVal &gt; key)<br>            high = mid - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> mid; <span class="hljs-comment">// key found</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> -(low + <span class="hljs-number">1</span>);  <span class="hljs-comment">// key not found.</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>例如 $[1,3,5,6]$ 要插入 $2$ 那么就是找到一个位置，这个位置左侧元素都比它小<ul><li>等循环结束，若没找到，low 左侧元素肯定都比 target 小，因此 low 即插入点</li></ul></li><li>插入点取负是为了与找到情况区分</li><li>-1 是为了把索引 0 位置的插入点与找到的情况进行区分</li></ul><h3 id="Leftmost-与-Rightmost"><a href="#Leftmost-与-Rightmost" class="headerlink" title="Leftmost 与 Rightmost"></a>Leftmost 与 Rightmost</h3><p>有时我们希望返回的是最左侧的重复元素，如果用 Basic 二分查找</p><ul><li><p>对于数组 $[1, 2, 3, 4, 4, 5, 6, 7]$，查找元素4，结果是索引3</p></li><li><p>对于数组 $[1, 2, 4, 4, 4, 5, 6, 7]$，查找元素4，结果也是索引3，并不是最左侧的元素</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchLeftmost1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">candidate</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            candidate = m; <span class="hljs-comment">// 记录候选位置</span><br>            j = m - <span class="hljs-number">1</span>;     <span class="hljs-comment">// 继续向左</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> candidate;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果希望返回的是最右侧元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchRightmost1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">candidate</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            candidate = m; <span class="hljs-comment">// 记录候选位置</span><br>            i = m + <span class="hljs-number">1</span>;   <span class="hljs-comment">// 继续向右</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> candidate;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>应用</strong></p><p>对于 Leftmost 与 Rightmost，可以返回一个比 -1 更有用的值</p><p>Leftmost 改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchLeftmost</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt;= a[m]) &#123;<br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = m + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i; <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>leftmost 返回值的另一层含义：$\lt target$ 的元素个数</li><li>小于等于中间值，都要向左找</li></ul><p>Rightmost 改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchRightmost</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = m + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>大于等于中间值，都要向右找</li></ul><p>几个名词</p><img src="http://cdn.ohheng.cn/202406120944615.png"/><p><strong>范围查询</strong>：</p><ul><li>查询 $x \lt 4$，$0 .. leftmost(4) - 1$</li><li>查询 $x \leq 4$，$0 .. rightmost(4)$</li><li>查询 $4 \lt x$，$rightmost(4) + 1 .. \infty $</li><li>查询 $4 \leq x$， $leftmost(4) .. \infty$</li><li>查询 $4 \leq x \leq 7$，$leftmost(4) .. rightmost(7)$</li><li>查询 $4 \lt x \lt 7$，$rightmost(4)+1 .. leftmost(7)-1$</li></ul><p><strong>求排名</strong>：$leftmost(target) + 1$</p><ul><li>$target$ 可以不存在，如：$leftmost(5)+1 &#x3D; 6$</li><li>$target$ 也可以存在，如：$leftmost(4)+1 &#x3D; 3$</li></ul><p><strong>求前任（predecessor）</strong>：$leftmost(target) - 1$</p><ul><li>$leftmost(3) - 1 &#x3D; 1$，前任 $a_1 &#x3D; 2$</li><li>$leftmost(4) - 1 &#x3D; 1$，前任 $a_1 &#x3D; 2$</li></ul><p><strong>求后任（successor）</strong>：$rightmost(target)+1$</p><ul><li>$rightmost(5) + 1 &#x3D; 5$，后任 $a_5 &#x3D; 7$</li><li>$rightmost(4) + 1 &#x3D; 5$，后任 $a_5 &#x3D; 7$</li></ul><p><strong>求最近邻居</strong>：</p><ul><li>前任和后任距离更近者</li></ul><h1 id="二-练习"><a href="#二-练习" class="headerlink" title="二. 练习"></a>二. 练习</h1><h2 id="2-1-时间复杂度"><a href="#2-1-时间复杂度" class="headerlink" title="2.1 时间复杂度"></a>2.1 时间复杂度</h2><p>用函数 $f(n)$ 表示算法效率与数据规模的关系，假设每次解决问题需要 1 微秒（$10^{-6}$ 秒），进行估算：</p><ol><li>如果 $f(n) &#x3D; n^2$ 那么 1 秒能解决多少次问题？1 天呢？</li><li>如果 $f(n) &#x3D; log_2(n)$  那么 1 秒能解决多少次问题？1 天呢？</li><li>如果 $f(n) &#x3D; n!$ 那么 1 秒能解决多少次问题？1 天呢？</li></ol><p>参考解答</p><ol><li>1秒 $\sqrt{10^6} &#x3D; 1000$ 次，1 天 $\sqrt{10^6 * 3600 * 24} \approx 293938$ 次</li><li>1秒 $2^{1,000,000} $ 次，一天 $2^{86,400,000,000}$</li><li>推算如下<ul><li>$10! &#x3D; 3,628,800$ 1秒能解决 $1,000,000$ 次，因此次数为 9 次</li><li>$14!&#x3D;87,178,291,200$，一天能解决 $86,400,000,000$ 次，因此次数为 13 次</li></ul></li></ol><h2 id="2-2-二分查找"><a href="#2-2-二分查找" class="headerlink" title="2.2 二分查找"></a>2.2 二分查找</h2><ul><li><a href="https://leetcode.cn/problems/sqrtx/">69. x 的平方根 - 力扣（LeetCode）</a></li></ul><h3 id="E01-二分查找-力扣-704-题"><a href="#E01-二分查找-力扣-704-题" class="headerlink" title="E01. 二分查找-力扣 704 题"></a>E01. 二分查找-力扣 704 题</h3><p><strong>要点</strong>：减而治之，可以用递归或非递归实现</p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">输入: nums = [-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>], target = <span class="hljs-number">9</span><br>输出: <span class="hljs-number">4</span><br>解释: <span class="hljs-number">9</span> 出现在 nums 中并且下标为 <span class="hljs-number">4</span><br>    <br>输入: nums = [-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>], target = <span class="hljs-number">2</span><br>输出: -<span class="hljs-number">1</span><br>解释: <span class="hljs-number">2</span> 不存在 nums 中因此返回 -<span class="hljs-number">1</span>    <br></code></pre></td></tr></table></figure><p><strong>参考答案</strong>：略，可以用讲过的任意一种二分求解</p><h3 id="E02-搜索插入位置-力扣-35-题"><a href="#E02-搜索插入位置-力扣-35-题" class="headerlink" title="E02. 搜索插入位置-力扣 35 题"></a>E02. 搜索插入位置-力扣 35 题</h3><p><strong>要点</strong>：理解谁代表插入位置</p><p>给定一个排序数组和一个目标值</p><ul><li>在数组中找到目标值，并返回其索引</li><li>如果目标值不存在于数组中，返回它将会被按顺序插入的位置</li></ul><p>例如</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: nums = [1,3,5,6], target = 5</span><br><span class="hljs-section">输出: 2</span><br><br><span class="hljs-section">输入: nums = [1,3,5,6], target = 2</span><br><span class="hljs-section">输出: 1</span><br><br><span class="hljs-section">输入: nums = [1,3,5,6], target = 7</span><br><span class="hljs-section">输出: 4</span><br></code></pre></td></tr></table></figure><p><strong>参考答案1</strong>：用二分查找基础版代码改写，基础版中，找到返回 m，没找到 i 代表插入点，因此有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i; <span class="hljs-comment">// 原始 return -1</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>参考答案2</strong>：用二分查找平衡版改写，平衡版中</p><ul><li>如果 target &#x3D;&#x3D; a[i] 返回 i 表示找到</li><li>如果 target &lt; a[i]，例如 target &#x3D; 2，a[i] &#x3D; 3，这时就应该在 i 位置插入 2</li><li>如果 a[i] &lt; target，例如 a[i] &#x3D; 3，target &#x3D; 4，这时就应该在 i+1 位置插入 4</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span> &lt; j - i) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<br>            j = m;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (target &lt;= a[i]) ? i : i + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 原始 (target == a[i]) ? i : -1;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>参考答案3</strong>：用 leftmost 版本解，返回值即为插入位置（并能处理元素重复的情况）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(target &lt;= a[m]) &#123;<br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="E03-搜索开始结束位置-力扣-34-题"><a href="#E03-搜索开始结束位置-力扣-34-题" class="headerlink" title="E03. 搜索开始结束位置-力扣 34 题"></a>E03. 搜索开始结束位置-力扣 34 题</h3><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题</p><p>例如</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[5,7,7,8,8,10]</span>, target = 8<br>输出：<span class="hljs-comment">[3,4]</span><br><br>输入：nums = <span class="hljs-comment">[5,7,7,8,8,10]</span>, target = 6<br>输出：<span class="hljs-comment">[-1,-1]</span><br><br>输入：nums = <span class="hljs-comment">[]</span>, target = 0<br>输出：<span class="hljs-comment">[-1,-1]</span><br></code></pre></td></tr></table></figure><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">left</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">candidate</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            candidate = m;<br>            j = m - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> candidate;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">right</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">candidate</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<br>            j = m - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<br>            i = m + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            candidate = m;<br>            i = m + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> candidate;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] searchRange(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> left(nums, target);<br>    <span class="hljs-keyword">if</span>(x == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;x, right(nums, target)&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>月光下的Memary🌙 | 零碎的岛屿终会遇到海，慢慢亦漫漫</title>
    <link href="/2024/06/11/(%E6%9C%88%E5%85%89%E4%B8%8B%E7%9A%84Memary)%E9%9B%B6%E7%A2%8E%E7%9A%84%E5%B2%9B%E5%B1%BF%E7%BB%88%E4%BC%9A%E9%81%87%E5%88%B0%E6%B5%B7%EF%BC%8C%E6%85%A2%E6%85%A2%E4%BA%A6%E6%BC%AB%E6%BC%AB/"/>
    <url>/2024/06/11/(%E6%9C%88%E5%85%89%E4%B8%8B%E7%9A%84Memary)%E9%9B%B6%E7%A2%8E%E7%9A%84%E5%B2%9B%E5%B1%BF%E7%BB%88%E4%BC%9A%E9%81%87%E5%88%B0%E6%B5%B7%EF%BC%8C%E6%85%A2%E6%85%A2%E4%BA%A6%E6%BC%AB%E6%BC%AB/</url>
    
    <content type="html"><![CDATA[<p>​最近总是神经质地觉得自己能闻到风的味道，不是花香，不是夏天的热浪，也不是女孩子温柔的洗衣液或香水味，就是单调的风的具象味道。</p><p>​近些日子陆陆续续听到熟悉又陌生的高考消息，突然会想起当时高考那年的日子，大家对在计划着高考之后的假期会去哪里旅行，和谁一起出去玩，看些什么书和电影，追些什么综艺和电视剧，吵吵闹闹的，是高中给我们留下的最后的不多的愉快回忆，好像那个假期漫长的不会结束。但不管这些计划会完成多少，眼里闪闪发光憧憬这些日子已经足够令人珍惜了。</p><p>​“你们再看看题，我再看看你们。”老师当时的话仿佛就在耳旁。现在想来，好像真的是用高三去憧憬大学，却用一整个大学时间来怀念高中。</p><p>​说来也奇怪，活了十几二十年，也还是没有找到关于自己的人生定义，好像才刚刚出生，睁开眼睛，就要被生活的洪流推着走，没有考虑过自己真正想要什么，只是觉得一天一天将就着也就这么过去了。我想要的一生是怎样的呢？也许是偶尔想要经历跌宕起伏，走一回人生坎坷，体悟世间的沧桑变化，活成所谓别人眼里生命精彩的那个。但又间歇想要安逸平凡的小日子，在巷子里吹风在暖阳下和猫对话。这么看来，其实每个人都有自己的世界，不用完全敞开，开一扇窗就够了，想要照进来的光自然会进来。</p><p>​最近也越来越懂得逾期不候的道理，看好的机票不及时拍下来隔天航班就可能变更了，心仪的物件不当时决定好付款下次再看就卖完了，甜品店的新品上线总想去试一试但一直拖着就吃不到了。换季的不只是水果和气温，还有自己的心情，而我也不想要怀抱着充满遗憾的心，在反复地期待和失望中活了。</p><p>​一辈子看起来很长但过起来却很短，某些特定的时段和某种心态就更短了，很多事情都是当下不去做就不会再有了。所以千万不要觉得自己的梦想和爱好不值得一提，这些大大小小的事物不都是我们迫切想要么？要知道我们不是为了要变成别人期待的样子才去努力的，是为了成为自己想要的样子。</p><p>​可奇怪的是，现在的我慢慢的做任何选择都思前想后，小心翼翼。也不是说因为不再年轻，没有大把时间可以用来试错。而是清楚地知道，当下每一个看似简单的选择，都可能会指引自己走上不同的道路。成为蓦然回首时，众多遗憾里面的又一个。后来想想，人长大了，选择安全的，可预见的，有经验的路，也是本能。很多时候，遗憾的发生和意难平的出现，都是由当时的一个个的选择和决定而定性的。</p><p>​但还是希望尽量不放弃追求自己觉得最好的最适合的，妥协和将就换来的也只是遗憾和后悔。我时常在想，如果我们在面对质疑的时候，也不放弃，而是继续努力下去，那会不会碰到这个世界的一点点温柔呢？</p><p>​回想高考后的那段，感觉自己闯过了人生中非常重要的一个关卡。可以回家和老同学一起吃夜宵吹晚风畅谈，一同骑着小电驴回家。准备迎接懒觉起来后的太阳和接下来期待已久的暑假，还有无限可能的未来。我想“高考后”这三个字对于我们来说，不只是一个时间节点，更多的标志着：约定与梦想。而梦想再渺小，也有磅礴的力量。我相信，只要怀揣梦想，哪怕穿过漫长黑夜，总有一天，会穿越人群，发出属于自己的光芒。</p><p>​希望我们的每一个拐弯都是为了走到一条更好的道路上。</p><p>​希望我们不被岁月磨平棱角，不对世事消极抱怨，所有的选择都不是因为不得已，而是因为真心喜欢。</p><p>​希望我们在成为井井有条的大人前，拥有很多开心得一塌糊涂的回忆。</p><p>​零碎的岛屿终会遇到海，慢慢亦漫漫</p>]]></content>
    
    
    <categories>
      
      <category>月光下的Memary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Memary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot邮件发送（qq邮箱）</title>
    <link href="/2024/05/18/SpringBoot%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <url>/2024/05/18/SpringBoot%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="1、开启POP3-SMTP服务"><a href="#1、开启POP3-SMTP服务" class="headerlink" title="1、开启POP3|SMTP服务"></a>1、开启POP3|SMTP服务</h3><p>首先登录QQ邮箱&gt;&gt;&gt;登录成功后找到设置&gt;&gt;&gt;然后找到邮箱设置&gt;&gt;&gt;点击账户&gt;&gt;&gt;找到POP3|SMTP服务&gt;&gt;&gt;点击开启(开启需要验证，验证成功后会有一串授权码用于发送邮件使用)&gt;&gt;&gt;验证成功<br>记下QQ邮箱提示的授权码，这个授权码，就是发送邮件时需要的密码。</p><h3 id="2、引入依赖"><a href="#2、引入依赖" class="headerlink" title="2、引入依赖"></a>2、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、application-yml配置"><a href="#3、application-yml配置" class="headerlink" title="3、application.yml配置"></a>3、application.yml配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment">#邮箱基本配置</span><br>  <span class="hljs-attr">mail:</span><br>    <span class="hljs-comment">#配置smtp服务主机地址</span><br>    <span class="hljs-comment"># qq邮箱为smtp.qq.com          端口号465或587</span><br>    <span class="hljs-comment"># sina    smtp.sina.cn</span><br>    <span class="hljs-comment"># aliyun  smtp.aliyun.com</span><br>    <span class="hljs-comment"># 163     smtp.163.com       端口号465或994</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.qq.com</span><br>    <span class="hljs-comment">#发送者邮箱</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">****@qq.com</span><br>    <span class="hljs-comment">#配置密码,注意不是真正的密码，而是刚刚申请到的授权码</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">fe456156fefefee</span><br>    <span class="hljs-comment">#端口号465或587</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">465</span><br>    <span class="hljs-comment">#默认的邮件编码为UTF-8</span><br>    <span class="hljs-attr">default-encoding:</span> <span class="hljs-string">UTF-8</span><br>    <span class="hljs-comment">#其他参数</span><br>    <span class="hljs-attr">properties:</span><br>     <span class="hljs-attr">mail:</span><br>        <span class="hljs-comment">#配置SSL 加密工厂</span><br>      <span class="hljs-attr">smtp:</span><br>        <span class="hljs-attr">ssl:</span><br>          <span class="hljs-comment">#本地测试，先放开ssl</span><br>          <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-comment">#开启debug模式，这样邮件发送过程的日志会在控制台打印出来，方便排查错误</span><br>      <span class="hljs-attr">debug:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="4、编写发送邮件的方法"><a href="#4、编写发送邮件的方法" class="headerlink" title="4、编写发送邮件的方法"></a>4、编写发送邮件的方法</h3><h4 id="邮件生成工具类-EmailUtil-java"><a href="#邮件生成工具类-EmailUtil-java" class="headerlink" title="邮件生成工具类 EmailUtil.java"></a><strong>邮件生成工具类</strong> <code>EmailUtil.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Ohh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Desctription</span>: 电子邮件生成内容实用程序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2024-05-18 11:52</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成电子邮件内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> captcha       验证码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> emailHtmlPath 电子邮件html路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> String&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">buildEmailContent</span><span class="hljs-params">(String emailHtmlPath, String captcha)</span> &#123;<br>        <span class="hljs-comment">// 加载邮件html模板</span><br>        <span class="hljs-type">ClassPathResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(emailHtmlPath);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        String line;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = resource.getInputStream();<br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream));<br>            <span class="hljs-keyword">while</span> ((line = fileReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                buffer.append(line);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.info(<span class="hljs-string">&quot;发送邮件读取模板失败&#123;&#125;&quot;</span>, e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fileReader != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileReader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 替换html模板中的参数</span><br>        <span class="hljs-keyword">return</span> MessageFormat.format(buffer.toString(), captcha, EMAIL_TITLE, EMAIL_TITLE_ENGLISH, PLATFORM_RESPONSIBLE_PERSON, PLATFORM_ADDRESS);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建付费成功电子邮件内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> emailHtmlPath 电子邮件html路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderName     订单名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderTotal    订单总额</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> String&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">buildPaySuccessEmailContent</span><span class="hljs-params">(String emailHtmlPath, String orderName, String orderTotal)</span> &#123;<br>        <span class="hljs-comment">// 加载邮件html模板</span><br>        <span class="hljs-type">ClassPathResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(emailHtmlPath);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        String line;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = resource.getInputStream();<br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream));<br>            <span class="hljs-keyword">while</span> ((line = fileReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                buffer.append(line);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.info(<span class="hljs-string">&quot;发送邮件读取模板失败&#123;&#125;&quot;</span>, e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fileReader != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileReader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 替换html模板中的参数</span><br>        <span class="hljs-keyword">return</span> MessageFormat.format(buffer.toString(), orderName, orderTotal, PLATFORM_RESPONSIBLE_PERSON, PATH_ADDRESS, EMAIL_TITLE);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送支付成功电子邮件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> emailAccount 电子邮件帐户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mailSender   邮件发件人</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> emailConfig  电子邮件配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderName    订单名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderTotal   订单总额</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> MessagingException 消息传递异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendPaySuccessEmail</span><span class="hljs-params">(String emailAccount, JavaMailSender mailSender, EmailConfig emailConfig, String orderName, String orderTotal)</span> <span class="hljs-keyword">throws</span> MessagingException &#123;<br>        <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> mailSender.createMimeMessage();<br>        <span class="hljs-comment">// 邮箱发送内容组成</span><br>        <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>        helper.setSubject(<span class="hljs-string">&quot;【&quot;</span> + EMAIL_TITLE + <span class="hljs-string">&quot;】感谢您的购买，请查收您的订单&quot;</span>);<br>        helper.setText(buildPaySuccessEmailContent(EMAIL_HTML_PAY_SUCCESS_PATH, orderName, orderTotal), <span class="hljs-literal">true</span>);<br>        helper.setTo(emailAccount);<br>        helper.setFrom(EMAIL_TITLE + <span class="hljs-string">&#x27;&lt;&#x27;</span> + emailConfig.getEmailFrom() + <span class="hljs-string">&#x27;&gt;&#x27;</span>);<br>        mailSender.send(message);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="邮件常量-EmailConstant-java"><a href="#邮件常量-EmailConstant-java" class="headerlink" title="邮件常量 EmailConstant.java"></a><strong>邮件常量</strong> <code>EmailConstant.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Ohh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Desctription</span>: 电子邮件常量</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2024-05-17 23:20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmailConstant</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 电子邮件html内容路径 resources目录下</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">EMAIL_HTML_CONTENT_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;email.html&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 电子邮件html支付成功路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">EMAIL_HTML_PAY_SUCCESS_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pay.html&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * captcha缓存键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">CAPTCHA_CACHE_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;api:captcha:&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 电子邮件主题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">EMAIL_SUBJECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;验证码邮件&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 电子邮件标题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">EMAIL_TITLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;LinkSauce-API 接口开放平台&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 电子邮件标题英语</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">EMAIL_TITLE_ENGLISH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;LinkSauce-API Open Interface Platform&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 平台负责人</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">PLATFORM_RESPONSIBLE_PERSON</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Ohh&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * todo 平台地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">PLATFORM_ADDRESS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;a href=&#x27;https://api.qimuu.icu/&#x27;&gt;请联系我们&lt;/a&gt;&quot;</span>;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">PATH_ADDRESS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27;https://api.qimuu.icu/&#x27;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="邮件配置-EmailConfig-java"><a href="#邮件配置-EmailConfig-java" class="headerlink" title="邮件配置 EmailConfig.java"></a><strong>邮件配置</strong> <code>EmailConfig.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Ohh</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Desctription</span>: 电子邮件配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2024-05-18 11:55</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.mail&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">emailFrom</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;*****@qq.com&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="发送邮件方法-sendEmail"><a href="#发送邮件方法-sendEmail" class="headerlink" title="发送邮件方法 sendEmail"></a><strong>发送邮件方法</strong> <code>sendEmail</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendEmail</span><span class="hljs-params">(String emailAccount, String captcha)</span> <span class="hljs-keyword">throws</span> MessagingException &#123;<br>    <span class="hljs-comment">// 创建MimeMessage对象</span><br>    <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> mailSender.createMimeMessage();<br>    <span class="hljs-comment">// 邮箱发送内容组成</span><br>    <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// 设置主题</span><br>    helper.setSubject(EMAIL_SUBJECT);<br>    <span class="hljs-comment">// 设置正文</span><br>    helper.setText(buildEmailContent(EMAIL_HTML_CONTENT_PATH, captcha), <span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// 设置收件人</span><br>    helper.setTo(emailAccount);<br>    <span class="hljs-comment">// 设置发件人</span><br>    helper.setFrom(EMAIL_TITLE + <span class="hljs-string">&#x27;&lt;&#x27;</span> + emailConfig.getEmailFrom() + <span class="hljs-string">&#x27;&gt;&#x27;</span>);<br>    <span class="hljs-comment">// 发送邮件</span><br>    mailSender.send(message);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="邮件样式模板-email-html"><a href="#邮件样式模板-email-html" class="headerlink" title="邮件样式模板 email.html"></a><strong>邮件样式模板</strong> <code>email.html</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;email code&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-comment">&lt;!--邮箱验证码模板--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:#ECECEC; padding: 35px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height: 100%; margin: 0px auto; text-align: left; position: relative; border-top-left-radius: 5px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 5px; font-size: 14px; font-family:微软雅黑, 黑体; line-height: 1.5; box-shadow: rgb(153, 153, 153) 0px 0px 5px; border-collapse: collapse; background-position: initial initial; background-repeat: initial initial;background:#fff;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 25px; line-height: 25px; padding: 15px 35px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: RGB(148,0,211); background-color: RGB(148,0,211); border-top-left-radius: 5px; border-top-right-radius: 5px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">valign</span>=<span class="hljs-string">&quot;middle&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;微软雅黑&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: rgb(255, 255, 255); &quot;</span>&gt;</span>&#123;1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;word-break:break-all&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding:25px 35px 40px; background-color:#fff;opacity:0.8;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 5px 0px; &quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#333333&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;line-height: 20px; &quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;line-height: 22px; &quot;</span>&gt;</span><br>                                尊敬的用户：<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 中文 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>您好！感谢您使用&#123;1&#125;，您的账号正在进行邮箱验证，验证码为：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: &#x27;#ff8c00&#x27;;font-size: 16px;font-weight: bold&quot;</span>&gt;</span>&#123;0&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        ，有效期5分钟，请尽快填写验证码完成验证！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 英文 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 5px 0px; &quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#333333&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;line-height: 20px; &quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;line-height: 22px; &quot;</span>&gt;</span><br>                                Dear user:<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello! Thanks for using &#123;2&#125;, your account is being authenticated by email, the<br>                        verification code is: <span class="hljs-tag">&lt;<span class="hljs-name">span</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: &#x27;#ff8c00&#x27;;font-size: 16px;font-weight: bold&quot;</span>&gt;</span> &#123;0&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> , valid for 5<br>                        minutes. Please fill in the<br>                        verification code as soon as<br>                        possible!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;margin:0 auto;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding:10px 10px 0;border-top:1px solid #ccc;color:#747474;margin-bottom:20px;line-height:1.3em;font-size:12px;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;3&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>此电子邮件仅限本人查看！如果有人要求你与他分享此 电子邮件或验证，或你认为误收此电子邮件，&#123;4&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>此为系统邮件，请勿回复<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                                Please do not reply to this system email<br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>邮件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ant Design Pro 的初始化</title>
    <link href="/2024/04/29/AntDesignPro%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <url>/2024/04/29/AntDesignPro%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<blockquote><p>查看 <a href="pro.ant.design/zh-CN/docs/getting-started">官方文档</a></p></blockquote><ol><li><p>安装初始化脚手架</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 npm</span><br>npm i @ant-design/pro-cli -g<br></code></pre></td></tr></table></figure></li><li><p>打开将要存放项目的文件夹 创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pro create linksauce-frontend<br></code></pre></td></tr></table></figure><p><strong>选择umi版本</strong></p><blockquote>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">? 🐂 使用 umi@4 还是 umi@3 ? (Use arrow keys)<br>❯ umi@4<br>umi@3<br></code></pre></td></tr></table></figure></blockquote></li><li><p>安装yarn</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局安装</span><br>npm install -g yarn<br></code></pre></td></tr></table></figure><p>查看yarn版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn -version<br></code></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn<br></code></pre></td></tr></table></figure></li><li><p>运行测试<code>package.json</code>中的<code>start</code></p><p><img src="http://cdn.ohheng.cn/202404292132212.png" alt="image-20240329154642753"></p><p><img src="http://cdn.ohheng.cn/202404292132994.png" alt="image-20240329154642753"></p></li><li><p>项目瘦身，<strong>有坑，可跳过！！！</strong></p><ul><li><p>运行<code>package.json</code>中的<code>i18n-remove</code>去除国际化，手动删除<code>src\locales</code></p><blockquote><p>如果报错，检查一下是不是没删干净，可以手动去除</p></blockquote><p><strong>AntDesign去国际化 后 router页面显示问题：</strong></p><blockquote><p>  解决方法：执行 </p><p>  <code>yarn add eslint-config-prettier</code></p><p>  <code>yarn add eslint-plugin-unicorn</code></p><p>  然后修改<code>node_modules/@umijs/lint/dist/config/eslint/index.js</code> </p><p>  &#x2F;&#x2F; es2022: true把这个注释掉就可以解决问题</p></blockquote><p>如果不行，修改<code>config\routes.ts</code>如下即可：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;登录&#x27;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-attr">layout</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">routes</span>: [&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/login&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./User/Login&#x27;</span> &#125;] &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;欢迎页面&#x27;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/welcome&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;smile&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./Welcome&#x27;</span> &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;crown&#x27;</span>,<br>    <span class="hljs-attr">access</span>: <span class="hljs-string">&#x27;canAdmin&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;管理员页面&#x27;</span>,<br>    <span class="hljs-attr">routes</span>: [<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/admin/sub-page&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin/sub-page&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./Admin&#x27;</span> &#125;,<br>    ],<br>  &#125;,<br>  &#123; <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/list&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./TableList&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;表格页&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/welcome&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">layout</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">component</span>: <span class="hljs-string">&#x27;./404&#x27;</span> &#125;,<br>];<br></code></pre></td></tr></table></figure></li><li><p>删除<code>src\tests</code></p></li></ul></li><li><p>重新安装依赖，重复第五步，确认是否能正常运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>初始化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建七牛云图床提升百倍写作效率</title>
    <link href="/2024/04/29/%E6%90%AD%E5%BB%BA%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A%E6%8F%90%E5%8D%87%E7%99%BE%E5%80%8D%E5%86%99%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    <url>/2024/04/29/%E6%90%AD%E5%BB%BA%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A%E6%8F%90%E5%8D%87%E7%99%BE%E5%80%8D%E5%86%99%E4%BD%9C%E6%95%88%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<h2 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h2><p><strong>配置</strong><br>下面讲一下如何配置：</p><ol><li><p>注册七牛云账号<br>登录七牛官网，先注册一个七牛云的账号，这里注意，用户类型选择个人账号，然后进行实名认证。</p></li><li><p>创建七牛云存储空间</p><p><img src="http://cdn.ohheng.cn/202404271443412.png" alt="img"></p></li><li><p>给自己的域名添加二级域名，因为我的域名是阿里云的，所以这里用阿里云的讲了</p></li></ol><p>  进入阿里云控制台：【云解析DNS】-&gt;【域名解析】-&gt;【解析设置】</p><p>  <img src="http://cdn.ohheng.cn/202404271443365.png" alt="img">然后添加一个二级域名，这个完了先不要关，等下还要改</p><ol start="4"><li>绑定二级域名<br>进入七牛云域名绑定页面，点击添加域名，然后下图只需要把刚刚配置的域名写上，然后其余默认就行，点击创建</li></ol><p>  <img src="http://cdn.ohheng.cn/202404271443035.png" alt="img"></p><p>然后回到上一个页面，跟着下图操作</p><p><img src="http://cdn.ohheng.cn/202404271443133.png" alt="image-20240427133925927"></p><p><img src="http://cdn.ohheng.cn/202404271443376.png" alt="image-20240427133938256"></p><p>然后回到刚刚添加域名的页面，点击刚刚添加的域名，把<a href="http://www.baidu.com改成刚刚复制的东西/">www.baidu.com改成刚刚复制的东西</a></p><p>配置完了之后等一会，系统审核完成后会发邮件，等状态变成成功说明配置完成了</p><p><img src="http://cdn.ohheng.cn/202404271443099.png" alt="img"></p><p>记得查看外链域名修改为自己的，以及确认访问控制是否为公开</p><p><img src="http://cdn.ohheng.cn/202404271447536.png" alt="image-20240427144720493"></p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>下载安装PicGo </p><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>挑选一个版本，根据自己的操作系统（Win&#x2F;Linux&#x2F;Mac）来下载一个安装包：</p><p><img src="http://cdn.ohheng.cn/202404271443350.png" alt="image-20240427141940822"></p><p>进入七牛云页面，右上角头像-&gt;密钥管理-&gt;复制 AccessKey和SecretKey到PicGo中，</p><p>存储空间名是你第二步建立的空间的名字<br>网址是刚刚绑定的那个二级域名<br>存储区域：七牛云的存储区域（华东 z0，华北 z1，华南 z2，北美 na0，东南亚 as0 ），根据你空间所在的区域，填对应的代码</p><p><img src="http://cdn.ohheng.cn/202404271443329.png" alt="image-20220330004201058"></p><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>ypora开启图片自动上传</p><p>最后，打开Typora，在偏好设置中，按照图中配置即可：</p><p><img src="http://cdn.ohheng.cn/202404271444040.png" alt="image-20240427144413998"></p><blockquote><p>参考CSDN:<code>https://blog.csdn.net/qq_46311811/article/details/123836233</code></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>域名</tag>
      
      <tag>DNS</tag>
      
      <tag>Typora</tag>
      
      <tag>PicGo</tag>
      
      <tag>图床</tag>
      
      <tag>七牛云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHubPages绑定自定义域名</title>
    <link href="/2024/04/29/GitHubPages%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <url>/2024/04/29/GitHubPages%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在阿里云配置 DNS 记录：</p><ol><li>登录到阿里云控制台。</li><li>转到<strong>【云解析DNS】&gt;【域名解析】&gt;【解析设置】</strong>。</li><li>添加以下四条 A 记录：</li></ol><ul><li>主机记录：**@**</li><li>记录类型：<strong>A</strong></li><li>记录值：<code>185.199.108.153</code></li><li>TTL：根据您的需求设置，建议设置为 600（10 分钟）。</li><li>添加第二条 A 记录，重复上述步骤，但将记录值更改为 <code>185.199.109.153</code>。</li><li>添加第三条 A 记录，重复上述步骤，但将记录值更改为 <code>185.199.110.153</code>。</li><li>添加第四条 A 记录，重复上述步骤，但将记录值更改为 <code>185.199.111.153</code>。</li></ul><ol start="5"><li>如果您希望使用 www 子域名 ，例如 <a href="http://www.example.com/">www.example.com</a> ，则需要添加一条 CNAME 记录：</li></ol><ul><li>主机记录：www</li><li>记录类型：CNAME</li><li>记录值：用户名. Github. Io（将用户名替换为您的 GitHub 用户名）</li><li>TTL：根据您的需求设置，建议设置为 600（10 分钟）。</li></ul><p>等待 DNS 解析生效。这可能需要一些时间，通常在几分钟到几小时之间，最多可能需要 48 小时。</p><p>完成这些步骤后，您的域名应该会成功指向您的 GitHub 个人主页。</p><p>如果在完成上述步骤后仍无法访问您的域名，请检查您的设置或等待 DNS 解析生效。</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><h3 id="A-这些记录值是在做什么"><a href="#A-这些记录值是在做什么" class="headerlink" title="A. 这些记录值是在做什么"></a>A. 这些记录值是在做什么</h3><p>这里的记录值是 DNS 记录的一部分。在这个过程中，我们添加了 A 记录和 CNAME 记录。下面是这些记录值的解释：</p><ol><li><p><strong>A 记录（地址记录）：</strong><br>A 记录用于将域名解析到一个 IPv4 地址。在这个例子中，我们添加了四个 A 记录，每个记录值是 GitHub Pages 的服务器 IP 地址：</p><ul><li><p>185.199.108.153</p></li><li><p>185.199.109.153</p></li><li><p>185.199.110.153</p></li><li><p>185.199.111.153</p></li></ul><p>当用户访问您的域名时（例如：example.com），DNS 服务器会查找与该域名关联的 IP 地址。通过设置这些 A 记录，您告诉 DNS 服务器，您的域名应该解析到这四个 GitHub Pages 服务器中的一个。这样，当用户访问您的域名时，他们将被引导到托管在 GitHub Pages 上的网站。</p></li><li><p><strong>CNAME 记录（规范名称记录）：</strong><br>CNAME 记录用于将一个域名（通常是子域名）映射到另一个域名。在这个例子中，我们添加了一个 CNAME 记录，将 www 子域名（如：<a href="http://www.example.com)映射到您的/">www.example.com）映射到您的</a> GitHub Pages 个人主页域名（如：用户名.github.io，将 用户名 替换为您的 GitHub 用户名）。</p><p>添加这个 CNAME 记录后，当用户访问 <a href="http://www.example.com/">www.example.com</a> 时，他们将被引导到与 用户名.github.io 关联的相同 GitHub Pages 网站。这样可以确保用户在访问 example.com 和 <a href="http://www.example.com/">www.example.com</a> 时看到的内容是一致的。</p></li></ol><p>总之，这些记录值用于指导 DNS 解析过程，将您的自定义域名解析到托管在 GitHub Pages 上的网站。这样，无论用户访问您的裸域名（如：example.com）还是带有 www 子域名的版本（如：<a href="http://www.example.com),他们都会看到您的/">www.example.com），他们都会看到您的</a> GitHub 个人主页。</p><h3 id="B-如果域名解析还是存在问题"><a href="#B-如果域名解析还是存在问题" class="headerlink" title="B. 如果域名解析还是存在问题"></a>B. 如果域名解析还是存在问题</h3><p>如果您的域名解析仍然存在问题，您可以尝试以下几种方法：</p><ol><li><p>检查您的 DNS 设置是否正确：</p><ul><li>确保您在阿里云的域名管理中已经添加了正确的 A 记录和 CNAME 记录。</li><li>确保您在 GitHub 仓库中添加了正确的 CNAME 文件，内容应为您的自定义域名。</li><li>如果您在设置过程中更改了任何设置，请确保保存更改。</li></ul></li><li><p>等待 DNS 解析生效：</p><ul><li>请耐心等待，因为 DNS 解析可能需要一段时间（从几分钟到 48 小时）。</li><li>您可以使用在线 DNS 查询工具（如 Google Public DNS 或其他第三方工具）来检查您的域名解析状态。</li></ul></li><li><p>清除浏览器缓存和 DNS 缓存：</p><ul><li>清除浏览器缓存以确保您查看的是最新版本的网站。</li><li>如果您使用的是 Windows，可以尝试通过命令提示符运行 <code>ipconfig /flushdns</code> 命令来清除 DNS 缓存。</li><li>对于 macOS，您可以使用 <code>sudo killall -HUP mDNSResponder</code> 命令来清除 DNS 缓存。</li><li>在 Linux 上，您可以使用 <code>sudo systemctl restart nscd</code> 或 <code>sudo /etc/init.d/nscd restart</code> 命令清除 DNS 缓存。</li></ul></li><li><p>检查防火墙或安全设置：</p><ul><li>某些防火墙或安全设置可能会阻止域名解析。请检查您的防火墙或安全设置，以确保它们没有阻止您的域名解析。</li></ul></li><li><p>寻求技术支持：</p><ul><li>如果问题仍然存在，请联系阿里云和 GitHub Pages 的技术支持，他们可以帮助您进一步诊断问题。</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>域名</tag>
      
      <tag>阿里云</tag>
      
      <tag>DNS</tag>
      
      <tag>GitHub</tag>
      
      <tag>Pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Nginx或修改后端代码解决跨域问题</title>
    <link href="/2024/04/29/%E4%BD%BF%E7%94%A8Nginx%E6%88%96%E4%BF%AE%E6%94%B9%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <url>/2024/04/29/%E4%BD%BF%E7%94%A8Nginx%E6%88%96%E4%BF%AE%E6%94%B9%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>浏览器为了用户的安全，仅允许向 <strong>同域名、同端口</strong> 的服务器发送请求。</p><p>如何解决跨域？</p><p>最直接的方式：把域名、端口改成相同的</p><h3 id="添加跨域头"><a href="#添加跨域头" class="headerlink" title="添加跨域头"></a>添加跨域头</h3><p>让服务器告诉浏览器：允许跨域（返回 cross-origin-allow 响应头）</p><h4 id="1-网关支持（Nginx）"><a href="#1-网关支持（Nginx）" class="headerlink" title="1. 网关支持（Nginx）"></a>1. 网关支持（Nginx）</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 跨域配置</span><br><span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /api/ &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080/api/;<br>    <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-variable">$http_origin</span>;<br>    <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="hljs-string">&#x27;true&#x27;</span>;<br>    <span class="hljs-attribute">add_header</span> Access-Control-Allow-Methods <span class="hljs-string">&#x27;GET, POST, OPTIONS&#x27;</span>;<br>    <span class="hljs-attribute">add_header</span> Access-Control-Allow-Headers <span class="hljs-string">&#x27;*&#x27;</span>;<br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="hljs-string">&#x27;true&#x27;</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-variable">$http_origin</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="hljs-string">&#x27;GET, POST, OPTIONS&#x27;</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="hljs-string">&#x27;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#x27;</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="hljs-number">1728000</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Content-Type&#x27;</span> <span class="hljs-string">&#x27;text/plain; charset=utf-8&#x27;</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Content-Length&#x27;</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">204</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-修改后端服务"><a href="#2-修改后端服务" class="headerlink" title="2. 修改后端服务"></a>2. 修改后端服务</h4><ol><li><p>配置 @CrossOrigin 注解</p></li><li><p>添加 web 全局请求拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfg</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//设置允许跨域的路径</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">//设置允许跨域请求的域名</span><br>                <span class="hljs-comment">//当**Credentials为true时，**Origin不能为星号，需为具体的ip地址【如果接口不带cookie,ip无需设成具体ip】</span><br>                .allowedOrigins(<span class="hljs-string">&quot;http://localhost:9527&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:9527&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8082&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8083&quot;</span>)<br>                <span class="hljs-comment">//是否允许证书 不再默认开启</span><br>                .allowCredentials(<span class="hljs-literal">true</span>)<br>                <span class="hljs-comment">//设置允许的方法</span><br>                .allowedMethods(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">//跨域允许时间</span><br>                .maxAge(<span class="hljs-number">3600</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义新的 corsFilter Bean，参考：<a href="https://www.jianshu.com/p/b02099a435bd">https://www.jianshu.com/p/b02099a435bd</a></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>跨域</tag>
      
      <tag>Nginx</tag>
      
      <tag>网关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot项目初始模板</title>
    <link href="/2024/04/29/SpringBoot%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E6%A8%A1%E6%9D%BF/"/>
    <url>/2024/04/29/SpringBoot%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Java SpringBoot 项目初始模板，整合了常用框架和示例代码，大家可以在此基础上快速开发自己的项目。</p><p> GitHub仓库：<code>https://github.com/Ohheng/sptingboot-init</code></p></blockquote><h2 id="模板功能"><a href="#模板功能" class="headerlink" title="模板功能"></a>模板功能</h2><ul><li>Spring Boot 2.7.0（贼新）</li><li>Spring MVC</li><li>MySQL 驱动</li><li>MyBatis</li><li>MyBatis Plus</li><li>Spring Session Redis 分布式登录</li><li>Spring AOP</li><li>Apache Commons Lang3 工具类</li><li>Lombok 注解</li><li>Swagger + Knife4j 接口文档</li><li>Spring Boot 调试工具和项目处理器</li><li>全局请求响应拦截器（记录日志）</li><li>全局异常处理器</li><li>自定义错误码</li><li>封装通用响应类</li><li>示例用户注册、登录、搜索功能</li><li>示例单元测试类</li><li>示例 SQL（用户表）</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>全局替换<code>ctrl+shift+r</code></li></ol><p><img src="http://cdn.ohheng.cn/202404292132269.png" alt="image-20240329163141569"></p><ol><li><p>修改pom文件中的描述文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>LinkSauce API开放平台<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改<code>application.yml</code>文件中mysql和redis的配置</p></li><li><p>全局替换数据库名称</p><p><img src="http://cdn.ohheng.cn/202404292132273.png" alt="image-20240329164528352"></p></li><li><p>全局替换包名 , 并手动修改包名称</p><p><img src="http://cdn.ohheng.cn/202404292132251.png" alt="image-20240329164817957"></p><p><img src="http://cdn.ohheng.cn/202404292132271.png" alt="image-20240329165114772"></p></li><li><p>刷新maven</p></li><li><p>运行并测试,利用swagger测试增删改查</p><blockquote><p>访问<code>http://localhost:7529/api/doc.html#/home</code></p></blockquote><p><img src="http://cdn.ohheng.cn/202404292132259.png" alt="image-20240329165918440"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>初始化</tag>
      
      <tag>后端</tag>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用Hexo搭建个人博客?</title>
    <link href="/2024/04/29/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/04/29/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>我的个人博客搭建成功啦！</p><p>这篇文章会给大家分享我是如何从0开始搭建我的个人独立博客的</p><p>接下来我们开始吧</p><p><strong>文章比较精简，没有废话，不要跳步</strong></p><h2 id="一、准备工具"><a href="#一、准备工具" class="headerlink" title="一、准备工具"></a>一、准备工具</h2><h3 id="1、官网安装Nodejs-建议使用-Node-js-12-0-及以上版本"><a href="#1、官网安装Nodejs-建议使用-Node-js-12-0-及以上版本" class="headerlink" title="1、官网安装Nodejs(建议使用 Node.js 12.0 及以上版本)"></a>1、官网安装Nodejs(建议使用 Node.js 12.0 及以上版本)</h3><p>NodeJs是Hexo所必需的环境。</p><p>点击 NodeJs 官网，下载左边那个即可，下载好一直 next，选择一个文件夹位置在一直 next 即可完成。安装Node.js会包含环境变量及npm的安装。</p><p><img src="http://cdn.ohheng.cn/202404291759751.png"></p><p>验证安装完成cmd中输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>npm -v<br>返回版本号代表安装完成。<br></code></pre></td></tr></table></figure><h3 id="2、安装git"><a href="#2、安装git" class="headerlink" title="2、安装git"></a>2、安装git</h3><p>Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。</p><p>我们网站在本地搭建好了，需要使用Git同步到云服务器或者GitHub的代码库里。点击 git 官网，下载安装包。点击 next，选择文件夹位置，然后一直 next 到底就行了，选择默认配置就好，默认配置会将环境变量配置好的。安装成功右击鼠标如图所示：</p><p><img src="http://cdn.ohheng.cn/202404291759753.png"></p><p><strong>接下来我们测试下是否都下载成功</strong></p><p>管理员运行cmd，依次输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>npm -v（这个是node附带的）<br>git -v<br></code></pre></td></tr></table></figure><h3 id="3、下载安装Hexo博客框架"><a href="#3、下载安装Hexo博客框架" class="headerlink" title="3、下载安装Hexo博客框架"></a>3、下载安装Hexo博客框架</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>接下来初始化一下hexo，，在该文件夹下鼠标右键gitbash后输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init blog<br></code></pre></td></tr></table></figure><p>“blog”是你要生成博客的文件夹名称，可以根据自己的喜好来取名。生成的文件如图所示：</p><p><img src="http://cdn.ohheng.cn/202404291759757.png"></p><p>输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>完成后，打开浏览器输入地址：<a href="">localhost:4000 </a>就可以看到你生成的博客了。使用ctrl+c可以把服务关掉。</p><p><strong>安装fluid主题</strong><br>主题下载：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>解压复制到博客根目录<code>\themes</code>目录下，更名为<strong>fluid</strong></p><p>修改博客根目录目录下<code>_config.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">theme: fluid  # 指定主题<br>language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改<br></code></pre></td></tr></table></figure><p>个性化主题页面，更详细的使用说明参考<a href="https://hexo.fluid-dev.com/docs/">官方文档</a>。</p><h2 id="二、将博客托管到GitHub"><a href="#二、将博客托管到GitHub" class="headerlink" title="二、将博客托管到GitHub"></a>二、将博客托管到GitHub</h2><h3 id="1、GitHub生成代码库"><a href="#1、GitHub生成代码库" class="headerlink" title="1、GitHub生成代码库"></a>1、GitHub生成代码库</h3><p>首先，你先要有一个GitHub账户。点击+号，选择New repository，新建仓库</p><p><img src="http://cdn.ohheng.cn/202404291759777.png"></p><p>创建一个和你用户名相同的仓库，后面加**.github.io<strong>，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是<code>xxxx.github.io</code>，其中xxx就是你注册GitHub的用户名，点击</strong>create repository**。</p><p><img src="http://cdn.ohheng.cn/202404291759764.png"></p><h3 id="2、本地SSH生成密钥，将公钥复制到云端"><a href="#2、本地SSH生成密钥，将公钥复制到云端" class="headerlink" title="2、本地SSH生成密钥，将公钥复制到云端"></a>2、本地SSH生成密钥，将公钥复制到云端</h3><p>回到本地主机git bash中，创建用户名和密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;GitHub用户名&quot;<br>git config --global user.email &quot;GitHub注册邮箱&quot;<br>git config --global user.password &quot;GitHub登录密码&quot;<br></code></pre></td></tr></table></figure><p>创建SSH密钥，一路回车</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;<br></code></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹，在C:\Users\24714.ssh中。<br>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，相当于钥匙，id_rsa.pub是公共秘钥，相当于锁。要把id_rsa.pub公共秘钥给GitHub，这样才能用自己的私人密钥去开这把锁。当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>将id_rsa.pub中的内容复制，而后在GitHub的setting中：</p><p><img src="http://cdn.ohheng.cn/202404291759781.png"></p><p>点击左侧SSH and GPG keys的设置选项，点击New SSH key，把你的id_rsa.pub里面的信息复制进去。title随便填，本地的公钥复制到key中。</p><p><img src="http://cdn.ohheng.cn/202404291759278.png"></p><p>在本地gitbash中检测GitHub公钥设置是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh git@github.com<br></code></pre></td></tr></table></figure><p>第一次登录需要输入GitHub的登录用户名和密码。</p><h3 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h3><p>下一步将我们的Hexo与GitHub关联起来，打开站博客根目录blog的配置文件_config.yml<br>翻到最后修改为：（注意后面三行缩进两格）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/lixinyiceline/lixinyiceline.github.io.git（改）</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>repository里的内容是GitHub代码仓库浏览器网址栏的网址，注意后面加上.git，保存站点配置文件。</p><p>4.本地上传到GitHub<br>本地gitbash安装Git部署插件</p><p>在<strong>blog</strong>目录下打开控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>这时，我们分别输入四条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install<br>hexo clean <br>hexo g <br>hexo d<br></code></pre></td></tr></table></figure><p>完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="http://xxxx.github.io,你就会发现你的博客已经上线了,可以在网络上被访问了./">http://xxxx.github.io，你就会发现你的博客已经上线了，可以在网络上被访问了。</a></p><h2 id="三、网站资料"><a href="#三、网站资料" class="headerlink" title="三、网站资料"></a>三、网站资料</h2><p>我们的博客标题还是默认的hexo，整个页面是初始默认的，接下来我们对其进行修改</p><p>用记事本打开我们blog文件夹中的<code>_config.yml</code>文件</p><p>将#Site下面按自己的需求填上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">副标题</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">描述</span><br><span class="hljs-attr">keywords:</span> <span class="hljs-string">关键词</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">站主</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">语言（可以填写zh-CN）</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">时区（可以填写Asia/Shanghai）</span><br></code></pre></td></tr></table></figure><p>然后保存</p><h2 id="四、如何上传文章"><a href="#四、如何上传文章" class="headerlink" title="四、如何上传文章"></a>四、如何上传文章</h2><p>我们在Blog文件夹中打开git bash,输入下方代码就可以生成新的文章md文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new 文章标题<br></code></pre></td></tr></table></figure><p>文章是.md格式，在我们的Blog文件夹中的<code>source/_posts</code>中</p><p>推荐用Typora软件来编辑.md格式的文件</p><blockquote><p>Typora官网：<a href="https://www.typoraio.cn/%EF%BC%8889%E5%85%83%E7%BB%88%E8%BA%AB%E4%BD%BF%E7%94%A8%EF%BC%8C%E6%8E%A8%E8%8D%90%E6%AD%A3%E7%89%88%EF%BC%89">https://www.typoraio.cn/（89元终身使用，推荐正版）</a></p><p>破解版奉上：<a href="https://kevinwu06.lanzout.com/iXkq30icv1ha">蓝奏云文件</a></p></blockquote><p>然后我们用Typora软件打开该.md文件就可以开始写文章了</p><p>写好以后，我们还是一样打开git bash生成、上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean <br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><blockquote><p>参考链接：</p><p><a href="https://blog.csdn.net/m0_50609661/article/details/125216866">搭建个人博客【搭建Hexo+Fluid博客并部署到GitHub&#x2F;云服务器（阿里云&#x2F;腾讯云）】</a></p><p><a href="https://blog.csdn.net/qq_21808961/article/details/84476504">hexo d命令报错 ERROR Deployer not found: git</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>初始化</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/29/hello-world/"/>
    <url>/2024/04/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
