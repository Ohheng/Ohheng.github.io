<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/04/29/GitHub%20Pages%20%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <url>/2024/04/29/GitHub%20Pages%20%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="title-GitHub-Pages-绑定自定义域名tags-域名-阿里云-DNS-GitHub-Pages"><a href="#title-GitHub-Pages-绑定自定义域名tags-域名-阿里云-DNS-GitHub-Pages" class="headerlink" title="title:GitHub Pages 绑定自定义域名tags:[域名,阿里云,DNS,GitHub,Pages]"></a>title:GitHub Pages 绑定自定义域名<br>tags:[域名,阿里云,DNS,GitHub,Pages]</h2><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在阿里云配置 DNS 记录：</p><ol><li>登录到阿里云控制台。</li><li>转到<strong>【云解析DNS】&gt;【域名解析】&gt;【解析设置】</strong>。</li><li>添加以下四条 A 记录：</li></ol><ul><li>主机记录：**@**</li><li>记录类型：<strong>A</strong></li><li>记录值：<code>185.199.108.153</code></li><li>TTL：根据您的需求设置，建议设置为 600（10 分钟）。</li><li>添加第二条 A 记录，重复上述步骤，但将记录值更改为 <code>185.199.109.153</code>。</li><li>添加第三条 A 记录，重复上述步骤，但将记录值更改为 <code>185.199.110.153</code>。</li><li>添加第四条 A 记录，重复上述步骤，但将记录值更改为 <code>185.199.111.153</code>。</li></ul><ol start="5"><li>如果您希望使用 www 子域名 ，例如 <a href="http://www.example.com/">www.example.com</a> ，则需要添加一条 CNAME 记录：</li></ol><ul><li>主机记录：www</li><li>记录类型：CNAME</li><li>记录值：用户名. Github. Io（将用户名替换为您的 GitHub 用户名）</li><li>TTL：根据您的需求设置，建议设置为 600（10 分钟）。</li></ul><p>等待 DNS 解析生效。这可能需要一些时间，通常在几分钟到几小时之间，最多可能需要 48 小时。</p><p>完成这些步骤后，您的域名应该会成功指向您的 GitHub 个人主页。</p><p>如果在完成上述步骤后仍无法访问您的域名，请检查您的设置或等待 DNS 解析生效。</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><h3 id="A-这些记录值是在做什么"><a href="#A-这些记录值是在做什么" class="headerlink" title="A. 这些记录值是在做什么"></a>A. 这些记录值是在做什么</h3><p>这里的记录值是 DNS 记录的一部分。在这个过程中，我们添加了 A 记录和 CNAME 记录。下面是这些记录值的解释：</p><ol><li><p><strong>A 记录（地址记录）：</strong><br>A 记录用于将域名解析到一个 IPv4 地址。在这个例子中，我们添加了四个 A 记录，每个记录值是 GitHub Pages 的服务器 IP 地址：</p><ul><li><p>185.199.108.153</p></li><li><p>185.199.109.153</p></li><li><p>185.199.110.153</p></li><li><p>185.199.111.153</p></li></ul><p>当用户访问您的域名时（例如：example.com），DNS 服务器会查找与该域名关联的 IP 地址。通过设置这些 A 记录，您告诉 DNS 服务器，您的域名应该解析到这四个 GitHub Pages 服务器中的一个。这样，当用户访问您的域名时，他们将被引导到托管在 GitHub Pages 上的网站。</p></li><li><p><strong>CNAME 记录（规范名称记录）：</strong><br>CNAME 记录用于将一个域名（通常是子域名）映射到另一个域名。在这个例子中，我们添加了一个 CNAME 记录，将 www 子域名（如：<a href="http://www.example.com)映射到您的/">www.example.com）映射到您的</a> GitHub Pages 个人主页域名（如：用户名.github.io，将 用户名 替换为您的 GitHub 用户名）。</p><p>添加这个 CNAME 记录后，当用户访问 <a href="http://www.example.com/">www.example.com</a> 时，他们将被引导到与 用户名.github.io 关联的相同 GitHub Pages 网站。这样可以确保用户在访问 example.com 和 <a href="http://www.example.com/">www.example.com</a> 时看到的内容是一致的。</p></li></ol><p>总之，这些记录值用于指导 DNS 解析过程，将您的自定义域名解析到托管在 GitHub Pages 上的网站。这样，无论用户访问您的裸域名（如：example.com）还是带有 www 子域名的版本（如：<a href="http://www.example.com),他们都会看到您的/">www.example.com），他们都会看到您的</a> GitHub 个人主页。</p><h3 id="B-如果域名解析还是存在问题"><a href="#B-如果域名解析还是存在问题" class="headerlink" title="B. 如果域名解析还是存在问题"></a>B. 如果域名解析还是存在问题</h3><p>如果您的域名解析仍然存在问题，您可以尝试以下几种方法：</p><ol><li><p>检查您的 DNS 设置是否正确：</p><ul><li>确保您在阿里云的域名管理中已经添加了正确的 A 记录和 CNAME 记录。</li><li>确保您在 GitHub 仓库中添加了正确的 CNAME 文件，内容应为您的自定义域名。</li><li>如果您在设置过程中更改了任何设置，请确保保存更改。</li></ul></li><li><p>等待 DNS 解析生效：</p><ul><li>请耐心等待，因为 DNS 解析可能需要一段时间（从几分钟到 48 小时）。</li><li>您可以使用在线 DNS 查询工具（如 Google Public DNS 或其他第三方工具）来检查您的域名解析状态。</li></ul></li><li><p>清除浏览器缓存和 DNS 缓存：</p><ul><li>清除浏览器缓存以确保您查看的是最新版本的网站。</li><li>如果您使用的是 Windows，可以尝试通过命令提示符运行 <code>ipconfig /flushdns</code> 命令来清除 DNS 缓存。</li><li>对于 macOS，您可以使用 <code>sudo killall -HUP mDNSResponder</code> 命令来清除 DNS 缓存。</li><li>在 Linux 上，您可以使用 <code>sudo systemctl restart nscd</code> 或 <code>sudo /etc/init.d/nscd restart</code> 命令清除 DNS 缓存。</li></ul></li><li><p>检查防火墙或安全设置：</p><ul><li>某些防火墙或安全设置可能会阻止域名解析。请检查您的防火墙或安全设置，以确保它们没有阻止您的域名解析。</li></ul></li><li><p>寻求技术支持：</p><ul><li>如果问题仍然存在，请联系阿里云和 GitHub Pages 的技术支持，他们可以帮助您进一步诊断问题。</li></ul></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/04/29/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98,%E4%BD%BF%E7%94%A8%E7%BD%91%E5%85%B3%EF%BC%88Nginx%EF%BC%89%E6%94%AF%E6%8C%81%E6%88%96%E4%BF%AE%E6%94%B9%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81/"/>
    <url>/2024/04/29/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98,%E4%BD%BF%E7%94%A8%E7%BD%91%E5%85%B3%EF%BC%88Nginx%EF%BC%89%E6%94%AF%E6%8C%81%E6%88%96%E4%BF%AE%E6%94%B9%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="title-跨域问题-使用网关（Nginx）支持或修改后端代码tags-跨域-Nginx-网关"><a href="#title-跨域问题-使用网关（Nginx）支持或修改后端代码tags-跨域-Nginx-网关" class="headerlink" title="title:跨域问题,使用网关（Nginx）支持或修改后端代码tags:[跨域,Nginx,网关]"></a>title:跨域问题,使用网关（Nginx）支持或修改后端代码<br>tags:[跨域,Nginx,网关]</h2><p>浏览器为了用户的安全，仅允许向 <strong>同域名、同端口</strong> 的服务器发送请求。</p><p>如何解决跨域？</p><p>最直接的方式：把域名、端口改成相同的</p><h3 id="添加跨域头"><a href="#添加跨域头" class="headerlink" title="添加跨域头"></a>添加跨域头</h3><p>让服务器告诉浏览器：允许跨域（返回 cross-origin-allow 响应头）</p><h4 id="1-网关支持（Nginx）"><a href="#1-网关支持（Nginx）" class="headerlink" title="1. 网关支持（Nginx）"></a>1. 网关支持（Nginx）</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 跨域配置</span><br><span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /api/ &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080/api/;<br>    <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-variable">$http_origin</span>;<br>    <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="hljs-string">&#x27;true&#x27;</span>;<br>    <span class="hljs-attribute">add_header</span> Access-Control-Allow-Methods <span class="hljs-string">&#x27;GET, POST, OPTIONS&#x27;</span>;<br>    <span class="hljs-attribute">add_header</span> Access-Control-Allow-Headers <span class="hljs-string">&#x27;*&#x27;</span>;<br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="hljs-string">&#x27;true&#x27;</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-variable">$http_origin</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="hljs-string">&#x27;GET, POST, OPTIONS&#x27;</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="hljs-string">&#x27;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#x27;</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="hljs-number">1728000</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Content-Type&#x27;</span> <span class="hljs-string">&#x27;text/plain; charset=utf-8&#x27;</span>;<br>        <span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Content-Length&#x27;</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">204</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-修改后端服务"><a href="#2-修改后端服务" class="headerlink" title="2. 修改后端服务"></a>2. 修改后端服务</h4><ol><li><p>配置 @CrossOrigin 注解</p></li><li><p>添加 web 全局请求拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfg</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//设置允许跨域的路径</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">//设置允许跨域请求的域名</span><br>                <span class="hljs-comment">//当**Credentials为true时，**Origin不能为星号，需为具体的ip地址【如果接口不带cookie,ip无需设成具体ip】</span><br>                .allowedOrigins(<span class="hljs-string">&quot;http://localhost:9527&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:9527&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8082&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8083&quot;</span>)<br>                <span class="hljs-comment">//是否允许证书 不再默认开启</span><br>                .allowCredentials(<span class="hljs-literal">true</span>)<br>                <span class="hljs-comment">//设置允许的方法</span><br>                .allowedMethods(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">//跨域允许时间</span><br>                .maxAge(<span class="hljs-number">3600</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义新的 corsFilter Bean，参考：<a href="https://www.jianshu.com/p/b02099a435bd">https://www.jianshu.com/p/b02099a435bd</a></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/04/29/SpringBoot%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E6%A8%A1%E6%9D%BF/"/>
    <url>/2024/04/29/SpringBoot%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="title-SpringBoot项目初始模板tags-后端-Java-Springboot-初始化"><a href="#title-SpringBoot项目初始模板tags-后端-Java-Springboot-初始化" class="headerlink" title="title:SpringBoot项目初始模板tags:[后端,Java,Springboot,初始化]"></a>title:SpringBoot项目初始模板<br>tags:[后端,Java,Springboot,初始化]</h2><blockquote><p>Java SpringBoot 项目初始模板，整合了常用框架和示例代码，大家可以在此基础上快速开发自己的项目。</p><p> GitHub仓库：<code>https://github.com/Ohheng/sptingboot-init</code></p></blockquote><h2 id="模板功能"><a href="#模板功能" class="headerlink" title="模板功能"></a>模板功能</h2><ul><li>Spring Boot 2.7.0（贼新）</li><li>Spring MVC</li><li>MySQL 驱动</li><li>MyBatis</li><li>MyBatis Plus</li><li>Spring Session Redis 分布式登录</li><li>Spring AOP</li><li>Apache Commons Lang3 工具类</li><li>Lombok 注解</li><li>Swagger + Knife4j 接口文档</li><li>Spring Boot 调试工具和项目处理器</li><li>全局请求响应拦截器（记录日志）</li><li>全局异常处理器</li><li>自定义错误码</li><li>封装通用响应类</li><li>示例用户注册、登录、搜索功能</li><li>示例单元测试类</li><li>示例 SQL（用户表）</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>全局替换<code>ctrl+shift+r</code></li></ol><p><img src="/img/in-post/post-springboot-init/image-20240329163141569.png"></p><ol><li><p>修改pom文件中的描述文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>LinkSauce API开放平台<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改<code>application.yml</code>文件中mysql和redis的配置</p></li><li><p>全局替换数据库名称</p><p><img src="/img/in-post/post-springboot-init/image-20240329164528352.png"></p></li><li><p>全局替换包名 , 并手动修改包名称</p><p><img src="/img/in-post/post-springboot-init/image-20240329164817957.png"></p><p><img src="/img/in-post/post-springboot-init/image-20240329165114772.png"></p></li><li><p>刷新maven</p></li><li><p>运行并测试,利用swagger测试增删改查</p><blockquote><p>访问<code>http://localhost:7529/api/doc.html#/home</code></p></blockquote><p><img src="/img/in-post/post-springboot-init/image-20240329165918440.png"></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何用Hexo搭建个人博客?</title>
    <link href="/2024/04/29/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/04/29/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>我的个人博客搭建成功啦！</p><p>这篇文章会给大家分享我是如何从0开始搭建我的个人独立博客的</p><p>接下来我们开始吧</p><p><strong>文章比较精简，没有废话，不要跳步</strong></p><h2 id="一、准备工具"><a href="#一、准备工具" class="headerlink" title="一、准备工具"></a>一、准备工具</h2><h3 id="1、官网安装Nodejs-建议使用-Node-js-12-0-及以上版本"><a href="#1、官网安装Nodejs-建议使用-Node-js-12-0-及以上版本" class="headerlink" title="1、官网安装Nodejs(建议使用 Node.js 12.0 及以上版本)"></a>1、官网安装Nodejs(建议使用 Node.js 12.0 及以上版本)</h3><p>NodeJs是Hexo所必需的环境。</p><p>点击 NodeJs 官网，下载左边那个即可，下载好一直 next，选择一个文件夹位置在一直 next 即可完成。安装Node.js会包含环境变量及npm的安装。</p><p><img src="http://cdn.ohheng.cn/202404291759751.png"></p><p>验证安装完成cmd中输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>npm -v<br>返回版本号代表安装完成。<br></code></pre></td></tr></table></figure><h3 id="2、安装git"><a href="#2、安装git" class="headerlink" title="2、安装git"></a>2、安装git</h3><p>Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。</p><p>我们网站在本地搭建好了，需要使用Git同步到云服务器或者GitHub的代码库里。点击 git 官网，下载安装包。点击 next，选择文件夹位置，然后一直 next 到底就行了，选择默认配置就好，默认配置会将环境变量配置好的。安装成功右击鼠标如图所示：</p><p><img src="http://cdn.ohheng.cn/202404291759753.png"></p><p><strong>接下来我们测试下是否都下载成功</strong></p><p>管理员运行cmd，依次输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>npm -v（这个是node附带的）<br>git -v<br></code></pre></td></tr></table></figure><h3 id="3、下载安装Hexo博客框架"><a href="#3、下载安装Hexo博客框架" class="headerlink" title="3、下载安装Hexo博客框架"></a>3、下载安装Hexo博客框架</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>接下来初始化一下hexo，，在该文件夹下鼠标右键gitbash后输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init blog<br></code></pre></td></tr></table></figure><p>“blog”是你要生成博客的文件夹名称，可以根据自己的喜好来取名。生成的文件如图所示：</p><p><img src="http://cdn.ohheng.cn/202404291759757.png"></p><p>输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>完成后，打开浏览器输入地址：<a href="">localhost:4000 </a>就可以看到你生成的博客了。使用ctrl+c可以把服务关掉。</p><p><strong>安装fluid主题</strong><br>主题下载：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>解压复制到博客根目录<code>\themes</code>目录下，更名为<strong>fluid</strong></p><p>修改博客根目录目录下<code>_config.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">theme: fluid  # 指定主题<br>language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改<br></code></pre></td></tr></table></figure><p>个性化主题页面，更详细的使用说明参考<a href="https://hexo.fluid-dev.com/docs/">官方文档</a>。</p><h2 id="二、将博客托管到GitHub"><a href="#二、将博客托管到GitHub" class="headerlink" title="二、将博客托管到GitHub"></a>二、将博客托管到GitHub</h2><h3 id="1、GitHub生成代码库"><a href="#1、GitHub生成代码库" class="headerlink" title="1、GitHub生成代码库"></a>1、GitHub生成代码库</h3><p>首先，你先要有一个GitHub账户。点击+号，选择New repository，新建仓库</p><p><img src="http://cdn.ohheng.cn/202404291759777.png"></p><p>创建一个和你用户名相同的仓库，后面加**.github.io<strong>，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是<code>xxxx.github.io</code>，其中xxx就是你注册GitHub的用户名，点击</strong>create repository**。</p><p><img src="http://cdn.ohheng.cn/202404291759764.png"></p><h3 id="2、本地SSH生成密钥，将公钥复制到云端"><a href="#2、本地SSH生成密钥，将公钥复制到云端" class="headerlink" title="2、本地SSH生成密钥，将公钥复制到云端"></a>2、本地SSH生成密钥，将公钥复制到云端</h3><p>回到本地主机git bash中，创建用户名和密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;GitHub用户名&quot;<br>git config --global user.email &quot;GitHub注册邮箱&quot;<br>git config --global user.password &quot;GitHub登录密码&quot;<br></code></pre></td></tr></table></figure><p>创建SSH密钥，一路回车</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;<br></code></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹，在C:\Users\24714.ssh中。<br>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，相当于钥匙，id_rsa.pub是公共秘钥，相当于锁。要把id_rsa.pub公共秘钥给GitHub，这样才能用自己的私人密钥去开这把锁。当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>将id_rsa.pub中的内容复制，而后在GitHub的setting中：</p><p><img src="http://cdn.ohheng.cn/202404291759781.png"></p><p>点击左侧SSH and GPG keys的设置选项，点击New SSH key，把你的id_rsa.pub里面的信息复制进去。title随便填，本地的公钥复制到key中。</p><p><img src="http://cdn.ohheng.cn/202404291759278.png"></p><p>在本地gitbash中检测GitHub公钥设置是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh git@github.com<br></code></pre></td></tr></table></figure><p>第一次登录需要输入GitHub的登录用户名和密码。</p><h3 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h3><p>下一步将我们的Hexo与GitHub关联起来，打开站博客根目录blog的配置文件_config.yml<br>翻到最后修改为：（注意后面三行缩进两格）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/lixinyiceline/lixinyiceline.github.io.git（改）</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>repository里的内容是GitHub代码仓库浏览器网址栏的网址，注意后面加上.git，保存站点配置文件。</p><p>4.本地上传到GitHub<br>本地gitbash安装Git部署插件</p><p>在<strong>blog</strong>目录下打开控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>这时，我们分别输入四条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install<br>hexo clean <br>hexo g <br>hexo d<br></code></pre></td></tr></table></figure><p>完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="http://xxxx.github.io,你就会发现你的博客已经上线了,可以在网络上被访问了./">http://xxxx.github.io，你就会发现你的博客已经上线了，可以在网络上被访问了。</a></p><h2 id="三、网站资料"><a href="#三、网站资料" class="headerlink" title="三、网站资料"></a>三、网站资料</h2><p>我们的博客标题还是默认的hexo，整个页面是初始默认的，接下来我们对其进行修改</p><p>用记事本打开我们blog文件夹中的<code>_config.yml</code>文件</p><p>将#Site下面按自己的需求填上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">副标题</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">描述</span><br><span class="hljs-attr">keywords:</span> <span class="hljs-string">关键词</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">站主</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">语言（可以填写zh-CN）</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">时区（可以填写Asia/Shanghai）</span><br></code></pre></td></tr></table></figure><p>然后保存</p><h2 id="四、如何上传文章"><a href="#四、如何上传文章" class="headerlink" title="四、如何上传文章"></a>四、如何上传文章</h2><p>我们在Blog文件夹中打开git bash,输入下方代码就可以生成新的文章md文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new 文章标题<br></code></pre></td></tr></table></figure><p>文章是.md格式，在我们的Blog文件夹中的<code>source/_posts</code>中</p><p>推荐用Typora软件来编辑.md格式的文件</p><blockquote><p>Typora官网：<a href="https://www.typoraio.cn/%EF%BC%8889%E5%85%83%E7%BB%88%E8%BA%AB%E4%BD%BF%E7%94%A8%EF%BC%8C%E6%8E%A8%E8%8D%90%E6%AD%A3%E7%89%88%EF%BC%89">https://www.typoraio.cn/（89元终身使用，推荐正版）</a></p><p>破解版奉上：<a href="https://kevinwu06.lanzout.com/iXkq30icv1ha">蓝奏云文件</a></p></blockquote><p>然后我们用Typora软件打开该.md文件就可以开始写文章了</p><p>写好以后，我们还是一样打开git bash生成、上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean <br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><blockquote><p>参考链接：</p><p><a href="https://blog.csdn.net/m0_50609661/article/details/125216866">搭建个人博客【搭建Hexo+Fluid博客并部署到GitHub&#x2F;云服务器（阿里云&#x2F;腾讯云）】</a></p><p><a href="https://blog.csdn.net/qq_21808961/article/details/84476504">hexo d命令报错 ERROR Deployer not found: git</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>初始化，Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/29/hello-world/"/>
    <url>/2024/04/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
